{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { Component } from 'inferno';\nimport { createElement } from 'inferno-create-element';\nimport { findDOMNode } from 'inferno-extras';\nimport classNames from 'classnames';\nimport { mapToCssModules, omit } from './utils';\nvar defaultProps = {\n  tag: 'div'\n};\nvar omitProps = ['tag', 'activeTab', 'className', 'cssModule'];\n\nfunction getContentSize() {\n  var domEl = findDOMNode(this);\n  return {\n    width: domEl.offsetWidth + 'px',\n    height: domEl.offsetHeight + 'px'\n  };\n} // This could probably be generalised in inferno-animation as part of animateOnAdd\n\n\nfunction animateCrossFadeIn(component, currSize, animationName, callback) {\n  var domEl = findDOMNode(component);\n  var height = domEl.offsetHeight + 'px';\n  var width = domEl.offsetWidth + 'px';\n  domEl.style.height = currSize.height;\n  domEl.style.width = currSize.width;\n  domEl.classList.add(animationName + '-enter'); // Trigger reflow\n\n  var tmp = domEl.offsetHeight; // 2. Set an animation listener, code at end\n\n  var done = false;\n  var nrofTransitionsLeft;\n\n  var onTransitionEnd = function onTransitionEnd(event) {\n    // Make sure it isn't a child that is triggering the event\n    if (event && event.target !== domEl) {\n      return;\n    }\n\n    if (event !== undefined && nrofTransitionsLeft > 0) {\n      nrofTransitionsLeft--;\n      return;\n    }\n\n    if (done) return;\n    done = true; // Clear style stuff\n\n    domEl.style.height = domEl.style.width = '';\n    domEl.classList.remove('InfernoAnimation-active');\n    domEl.classList.remove(animationName + '-enter-active');\n    domEl.classList.remove(animationName + '-enter-end'); // 5. Call callback to allow stuff to happen\n\n    callback && callback(domEl);\n  };\n\n  domEl.addEventListener(\"transitionend\", onTransitionEnd, false); // 3. Activate transitions\n\n  domEl.classList.add(animationName + '-enter-active'); // The following is needed so we can prevent nested animations from playing slower\n  // than parent animation causing a jump (in for example a cross-fade)\n\n  domEl.classList.add('InfernoAnimation-active');\n  var cs = window.getComputedStyle(domEl);\n  var dur = cs.getPropertyValue('transition-duration').split(',');\n  var del = cs.getPropertyValue('transition-delay').split(',');\n  var animTimeout = dur.map(function (v, index) {\n    return parseFloat(v) + parseFloat(del[index]);\n  }).reduce(function (prev, curr) {\n    return prev > curr ? prev : curr;\n  }, 0);\n  nrofTransitionsLeft = dur.length - 1;\n  setTimeout(onTransitionEnd, Math.round(animTimeout * 1000) + 50); // Fallback if transitionend fails\n\n  setTimeout(function () {\n    domEl.style.height = height;\n    domEl.style.width = width;\n    domEl.classList.remove(animationName + '-enter');\n    domEl.classList.add(animationName + '-enter-end');\n  }, 5);\n}\n\nvar TabContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TabContent, _Component);\n\n  function TabContent(props) {\n    var _this;\n\n    _classCallCheck(this, TabContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TabContent).call(this, props));\n    _this.state = {\n      activeTab: _this.props.activeTab\n    };\n    return _this;\n  }\n\n  _createClass(TabContent, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        activeTabId: this.state\n      };\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (this.state.activeTab !== nextProps.activeTab) {\n        var sourceSize = getContentSize.call(this);\n        this.setState({\n          activeTab: nextProps.activeTab\n        });\n\n        if (nextProps.fade) {\n          requestAnimationFrame(function () {\n            animateCrossFadeIn(_this2, sourceSize, 'FadeIn');\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          cssModule = _this$props.cssModule,\n          Tag = _this$props.tag;\n      var attributes = omit(this.props, omitProps);\n      var classes = mapToCssModules(classNames('tab-content', className), cssModule);\n      Object.assign(attributes, {\n        className: classes\n      });\n      return createElement(Tag, attributes, children);\n    }\n  }]);\n\n  return TabContent;\n}(Component);\n\nexport { TabContent as default };\nTabContent.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}