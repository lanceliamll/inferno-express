{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { Component } from 'inferno';\nimport classNames from 'classnames';\nimport { Arrow, Manager, Popper } from 'inferno-popper';\nimport PopperTargetHelper from './PopperTargetHelper';\nimport { mapToCssModules } from './utils';\nvar defaultProps = {\n  placement: 'auto',\n  isOpen: false,\n  offset: 0,\n  fallbackPlacement: 'flip',\n  wrapTag: 'span',\n  flip: true\n};\n\nvar PopperContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PopperContent, _Component);\n\n  function PopperContent(props) {\n    var _this;\n\n    _classCallCheck(this, PopperContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PopperContent).call(this, props));\n    _this.handlePlacementChange = _this.handlePlacementChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(PopperContent, [{\n    key: \"handlePlacementChange\",\n    value: function handlePlacementChange(data) {\n      if (this.state.placement !== data.placement) {\n        this.setState({\n          placement: data.placement\n        });\n      }\n\n      return data;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          cssModule = _this$props.cssModule,\n          children = _this$props.children,\n          isOpen = _this$props.isOpen,\n          flip = _this$props.flip,\n          target = _this$props.target,\n          offset = _this$props.offset,\n          fallbackPlacement = _this$props.fallbackPlacement,\n          placementPrefix = _this$props.placementPrefix,\n          className = _this$props.className,\n          wrapTag = _this$props.wrapTag,\n          wrapClassName = _this$props.wrapClassName,\n          tag = _this$props.tag,\n          attrs = _objectWithoutProperties(_this$props, [\"cssModule\", \"children\", \"isOpen\", \"flip\", \"target\", \"offset\", \"fallbackPlacement\", \"placementPrefix\", \"className\", \"wrapTag\", \"wrapClassName\", \"tag\"]);\n\n      var arrowClassName = mapToCssModules('arrow', cssModule);\n      var placement = (this.state.placement || attrs.placement).split('-')[0];\n      var managerClass = mapToCssModules(wrapClassName, this.props.cssModule);\n      var popperClassName = mapToCssModules(classNames(className, placementPrefix ? \"\".concat(placementPrefix, \"-\").concat(placement) : placement), this.props.cssModule);\n      var modifiers = {\n        offset: {\n          offset: offset\n        },\n        flip: {\n          enabled: flip,\n          behavior: fallbackPlacement\n        },\n        update: {\n          enabled: true,\n          order: 950,\n          fn: this.handlePlacementChange\n        }\n      };\n      return createComponentVNode(2, Manager, {\n        \"tag\": wrapTag,\n        \"className\": managerClass,\n        children: [createComponentVNode(2, PopperTargetHelper, {\n          \"target\": target\n        }), isOpen && normalizeProps(createComponentVNode(2, Popper, _objectSpread({\n          \"modifiers\": modifiers\n        }, attrs, {\n          \"component\": tag,\n          \"className\": popperClassName,\n          children: [children, createComponentVNode(2, Arrow, {\n            \"className\": arrowClassName\n          })]\n        })))]\n      });\n    }\n  }]);\n\n  return PopperContent;\n}(Component);\n\nPopperContent.defaultProps = defaultProps;\nexport default PopperContent;","map":null,"metadata":{},"sourceType":"module"}