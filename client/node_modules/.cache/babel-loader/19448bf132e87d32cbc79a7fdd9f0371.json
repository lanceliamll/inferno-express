{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createElement } from 'inferno-create-element';\nimport classNames from 'classnames';\nimport { mapToCssModules } from '../utils';\nvar defaultProps = {\n  tag: 'nav',\n  toggleable: false,\n  expandable: false\n};\n\nvar getToggleableClass = function getToggleableClass(toggleable) {\n  if (toggleable === false) {\n    return false;\n  } else if (toggleable === true || toggleable === 'xs') {\n    return 'navbar-expand';\n  }\n\n  return \"navbar-expand-\".concat(toggleable);\n};\n\nvar Navbar = function Navbar(props) {\n  var _classNames;\n\n  var children = props.children,\n      toggleable = props.toggleable,\n      expandable = props.expandable,\n      className = props.className,\n      cssModule = props.cssModule,\n      light = props.light,\n      dark = props.dark,\n      inverse = props.inverse,\n      fixed = props.fixed,\n      sticky = props.sticky,\n      color = props.color,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"toggleable\", \"expandable\", \"className\", \"cssModule\", \"light\", \"dark\", \"inverse\", \"fixed\", \"sticky\", \"color\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'navbar', getToggleableClass(toggleable || expandable), (_classNames = {\n    'navbar-light': light,\n    'navbar-dark': inverse || dark\n  }, _defineProperty(_classNames, \"bg-\".concat(color), color), _defineProperty(_classNames, \"fixed-\".concat(fixed), fixed), _defineProperty(_classNames, \"sticky-\".concat(sticky), sticky), _classNames)), cssModule);\n  Object.assign(attributes, {\n    className: classes\n  });\n  return createElement(Tag, attributes, children);\n};\n\nNavbar.defaultProps = defaultProps;\nexport default Navbar;","map":null,"metadata":{},"sourceType":"module"}