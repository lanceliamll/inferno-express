{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Component } from 'inferno';\nimport classNames from 'classnames';\nimport PopperContent from './PopperContent';\nimport { getTarget, mapToCssModules, omit } from './utils';\nimport { isNumber } from \"inferno-shared\";\nvar omitProps = ['placement', 'target', 'isOpen', 'cssModule', 'className', 'delay', 'disabled', 'placementPrefix', 'toggle'];\nvar DEFAULT_DELAYS = {\n  show: 0,\n  hide: 0\n};\nvar defaultProps = {\n  isOpen: false,\n  placement: 'right',\n  placementPrefix: 'bs-popover',\n  delay: DEFAULT_DELAYS,\n  toggle: function toggle() {}\n};\n\nvar Popover =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Popover, _Component);\n\n  function Popover(props) {\n    var _this;\n\n    _classCallCheck(this, Popover);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popover).call(this, props));\n    _this.addTargetEvents = _this.addTargetEvents.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleDocumentClick = _this.handleDocumentClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeTargetEvents = _this.removeTargetEvents.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.show = _this.show.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.hide = _this.hide.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Popover, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._target = getTarget(this.props.target);\n      this.handleProps();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.handleProps();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearShowTimeout();\n      this.clearHideTimeout();\n      this.removeTargetEvents();\n    }\n  }, {\n    key: \"getDelay\",\n    value: function getDelay(key) {\n      var delay = this.props.delay;\n\n      if (_typeof(delay) === 'object') {\n        return !isNumber(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];\n      }\n\n      return delay;\n    }\n  }, {\n    key: \"handleProps\",\n    value: function handleProps() {\n      if (this.props.isOpen) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.clearHideTimeout();\n      this.addTargetEvents();\n\n      if (!this.props.isOpen) {\n        this.clearShowTimeout();\n        this._showTimeout = setTimeout(this.toggle, this.getDelay('show'));\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.clearShowTimeout();\n      this.removeTargetEvents();\n\n      if (this.props.isOpen) {\n        this.clearHideTimeout();\n        this._hideTimeout = setTimeout(this.toggle, this.getDelay('hide'));\n      }\n    }\n  }, {\n    key: \"clearShowTimeout\",\n    value: function clearShowTimeout() {\n      clearTimeout(this._showTimeout);\n      this._showTimeout = undefined;\n    }\n  }, {\n    key: \"clearHideTimeout\",\n    value: function clearHideTimeout() {\n      clearTimeout(this._hideTimeout);\n      this._hideTimeout = undefined;\n    }\n  }, {\n    key: \"handleDocumentClick\",\n    value: function handleDocumentClick(e) {\n      if (e.target !== this._target && !this._target.contains(e.target)) {\n        if (this._hideTimeout) {\n          this.clearHideTimeout();\n        }\n\n        if (this.props.isOpen) {\n          this.toggle();\n        }\n      }\n    }\n  }, {\n    key: \"addTargetEvents\",\n    value: function addTargetEvents() {\n      document.addEventListener('click', this.handleDocumentClick, true);\n    }\n  }, {\n    key: \"removeTargetEvents\",\n    value: function removeTargetEvents() {\n      document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(e) {\n      if (this.props.disabled) {\n        return e && e.preventDefault();\n      }\n\n      return this.props.toggle();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.isOpen) {\n        return null;\n      }\n\n      var attributes = omit(this.props, Object.keys(omitProps));\n      var classes = mapToCssModules(classNames('popover-inner', this.props.className), this.props.cssModule);\n      var popperClasses = mapToCssModules(classNames('popover', 'show'), this.props.cssModule);\n      return createComponentVNode(2, PopperContent, {\n        \"className\": popperClasses,\n        \"target\": this.props.target,\n        \"isOpen\": this.props.isOpen,\n        \"placement\": this.props.placement,\n        \"placementPrefix\": this.props.placementPrefix,\n        children: normalizeProps(createVNode(1, \"div\", classes, null, 1, _objectSpread({}, attributes)))\n      });\n    }\n  }]);\n\n  return Popover;\n}(Component);\n\nPopover.defaultProps = defaultProps;\nexport default Popover;","map":null,"metadata":{},"sourceType":"module"}