{"ast":null,"code":"import _classCallCheck from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { createVNode, createFragment } from \"inferno\";\nimport { Component, Fragment } from \"inferno\";\nimport { connect } from \"inferno-redux\";\nimport { addTodo, getTodos } from \"../actions/todoActions\";\n\nvar Todo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Todo, _Component);\n\n  function Todo() {\n    _classCallCheck(this, Todo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Todo).apply(this, arguments));\n  }\n\n  _createClass(Todo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getTodos();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var todos = this.props.todo.todos;\n      return createVNode(1, \"div\", null, [createVNode(1, \"h1\", null, \"Todo\", 16), createFragment(todos.map(function (todo) {\n        return createVNode(1, \"ul\", null, createVNode(1, \"li\", null, todo.todoName, 0), 2, null, todo.id);\n      }), 0)], 4);\n    }\n  }]);\n\n  return Todo;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    todo: state.todo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getTodos: getTodos\n})(Todo);","map":{"version":3,"sources":["/home/lance/Documents/projects/inferno-redux/client/src/components/Todo.js"],"names":["Component","Fragment","connect","addTodo","getTodos","Todo","props","todos","todo","map","todoName","id","mapStateToProps","state"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,SAApC;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,wBAAlC;;IAEMC,I;;;;;;;;;;;;;wCACgB;AAClB,WAAKC,KAAL,CAAWF,QAAX;AACD;;;6BAEQ;AAAA,UACCG,KADD,GACW,KAAKD,KAAL,CAAWE,IADtB,CACCD,KADD;AAGP,iGAIOA,KAAK,CAACE,GAAN,CAAU,UAAAD,IAAI;AAAA,qEAENA,IAAI,CAACE,QAFC,eACJF,IAAI,CAACG,EADD;AAAA,OAAd,CAJP;AAYD;;;;EApBgBX,S;;AAuBnB,IAAMY,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCL,IAAAA,IAAI,EAAEK,KAAK,CAACL;AADoB,GAAL;AAAA,CAA7B;;AAIA,eAAeN,OAAO,CACpBU,eADoB,EAEpB;AAAER,EAAAA,QAAQ,EAARA;AAAF,CAFoB,CAAP,CAGbC,IAHa,CAAf","sourcesContent":["import { Component, Fragment } from \"inferno\";\nimport { connect } from \"inferno-redux\";\nimport { addTodo, getTodos } from \"../actions/todoActions\";\n\nclass Todo extends Component {\n  componentDidMount() {\n    this.props.getTodos();\n  }\n\n  render() {\n    const { todos } = this.props.todo;\n\n    return (\n      <div>\n        <h1>Todo</h1>\n        <Fragment>\n          {todos.map(todo => (\n            <ul key={todo.id}>\n              <li>{todo.todoName}</li>\n            </ul>\n          ))}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  todo: state.todo\n});\n\nexport default connect(\n  mapStateToProps,\n  { getTodos }\n)(Todo);\n"]},"metadata":{},"sourceType":"module"}