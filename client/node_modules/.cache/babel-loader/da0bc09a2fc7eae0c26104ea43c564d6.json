{"ast":null,"code":"import _regeneratorRuntime from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lance/Documents/projects/inferno-redux/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { createVNode, createFragment, createComponentVNode } from \"inferno\";\nimport { Component, Fragment } from \"inferno\";\nimport { connect } from \"inferno-redux\";\nimport { addTodo, getTodos, getTodo, deleteTodo, editData } from \"../actions/todoActions\";\nimport IndividualTodo from \"./IndividualTodo\";\n\nvar Todo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Todo, _Component);\n\n  function Todo() {\n    var _this;\n\n    _classCallCheck(this, Todo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Todo).call(this));\n\n    _this.handleChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    };\n\n    _this.handleAddTodo =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var todoName, _this$props, addTodo, getTodos, newTodo;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                todoName = _this.state.todoName;\n                _this$props = _this.props, addTodo = _this$props.addTodo, getTodos = _this$props.getTodos;\n                newTodo = {\n                  todoName: todoName\n                };\n                _context.next = 6;\n                return addTodo(newTodo);\n\n              case 6:\n                _context.next = 8;\n                return getTodos();\n\n              case 8:\n                _this.setState({\n                  todoName: \"\"\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleEditTodo = function () {\n      console.log(\"Wow\");\n    };\n\n    _this.handleDeleteTodo = function (todoId) {\n      console.log(todoId);\n    };\n\n    _this.state = {\n      todoName: \"\",\n      oldTodo: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Todo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getTodos();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var todos = this.props.todo.todos;\n      var todoName = this.state.todoName;\n      return createVNode(1, \"div\", null, [createVNode(1, \"h1\", null, \"Todo\", 16), createFragment([createVNode(64, \"input\", null, null, 1, {\n        \"type\": \"text\",\n        \"name\": \"todoName\",\n        \"value\": todoName,\n        \"onInput\": this.handleChange\n      }), createVNode(1, \"button\", null, \"Add\", 16, {\n        \"onClick\": this.handleAddTodo,\n        \"type\": \"submit\"\n      })], 4), createFragment(todos.map(function (todo) {\n        return createFragment([createComponentVNode(2, IndividualTodo, {\n          \"todos\": todo\n        }, todo.id)], 4);\n      }), 0)], 4);\n    }\n  }]);\n\n  return Todo;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    todo: state.todo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getTodos: getTodos,\n  addTodo: addTodo,\n  getTodo: getTodo\n})(Todo);","map":{"version":3,"sources":["/home/lance/Documents/projects/inferno-redux/client/src/components/Todo.js"],"names":["Component","Fragment","connect","addTodo","getTodos","getTodo","deleteTodo","editData","IndividualTodo","Todo","handleChange","e","setState","target","name","value","handleAddTodo","preventDefault","todoName","state","props","newTodo","handleEditTodo","console","log","handleDeleteTodo","todoId","oldTodo","todos","todo","map","id","mapStateToProps"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,SAApC;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,OAHF,EAIEC,UAJF,EAKEC,QALF,QAMO,wBANP;AAOA,OAAOC,cAAP,MAA2B,kBAA3B;;IAEMC,I;;;;;AACJ,kBAAc;AAAA;;AAAA;;AACZ;;AADY,UAadC,YAbc,GAaC,UAAAC,CAAC,EAAI;AAClB,YAAKC,QAAL,qBAAiBD,CAAC,CAACE,MAAF,CAASC,IAA1B,EAAiCH,CAAC,CAACE,MAAF,CAASE,KAA1C;AACD,KAfa;;AAAA,UAiBdC,aAjBc;AAAA;AAAA;AAAA;AAAA;AAAA,+BAiBE,iBAAML,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACdA,gBAAAA,CAAC,CAACM,cAAF;AACQC,gBAAAA,QAFM,GAEO,MAAKC,KAFZ,CAEND,QAFM;AAAA,8BAGgB,MAAKE,KAHrB,EAGNjB,OAHM,eAGNA,OAHM,EAGGC,QAHH,eAGGA,QAHH;AAKViB,gBAAAA,OALU,GAKA;AACZH,kBAAAA,QAAQ,EAARA;AADY,iBALA;AAAA;AAAA,uBASRf,OAAO,CAACkB,OAAD,CATC;;AAAA;AAAA;AAAA,uBAURjB,QAAQ,EAVA;;AAAA;AAYd,sBAAKQ,QAAL,CAAc;AAAEM,kBAAAA,QAAQ,EAAE;AAAZ,iBAAd;;AAZc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAjBF;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAgCdI,cAhCc,GAgCG,YAAM;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,KAlCa;;AAAA,UAoCdC,gBApCc,GAoCK,UAAAC,MAAM,EAAI;AAC3BH,MAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACD,KAtCa;;AAGZ,UAAKP,KAAL,GAAa;AACXD,MAAAA,QAAQ,EAAE,EADC;AAEXS,MAAAA,OAAO,EAAE;AAFE,KAAb;AAHY;AAOb;;;;wCAEmB;AAClB,WAAKP,KAAL,CAAWhB,QAAX;AACD;;;6BA6BQ;AAAA,UACCwB,KADD,GACW,KAAKR,KAAL,CAAWS,IADtB,CACCD,KADD;AAAA,UAECV,QAFD,GAEc,KAAKC,KAFnB,CAECD,QAFD;AAIP;AAAA,gBAKa,MALb;AAAA,gBAMa,UANb;AAAA,iBAOeA,QAPf;AAAA,mBAQiB,KAAKR;AARtB;AAAA,mBAUuB,KAAKM,aAV5B;AAAA,gBAUgD;AAVhD,8BAeOY,KAAK,CAACE,GAAN,CAAU,UAAAD,IAAI;AAAA;AAAA,mBAE0BA;AAF1B,WAEUA,IAAI,CAACE,EAFf;AAAA,OAAd,CAfP;AAuBD;;;;EApEgB/B,S;;AAuEnB,IAAMgC,eAAe,GAAG,SAAlBA,eAAkB,CAAAb,KAAK;AAAA,SAAK;AAChCU,IAAAA,IAAI,EAAEV,KAAK,CAACU;AADoB,GAAL;AAAA,CAA7B;;AAIA,eAAe3B,OAAO,CACpB8B,eADoB,EAEpB;AAAE5B,EAAAA,QAAQ,EAARA,QAAF;AAAYD,EAAAA,OAAO,EAAPA,OAAZ;AAAqBE,EAAAA,OAAO,EAAPA;AAArB,CAFoB,CAAP,CAGbI,IAHa,CAAf","sourcesContent":["import { Component, Fragment } from \"inferno\";\nimport { connect } from \"inferno-redux\";\nimport {\n  addTodo,\n  getTodos,\n  getTodo,\n  deleteTodo,\n  editData\n} from \"../actions/todoActions\";\nimport IndividualTodo from \"./IndividualTodo\";\n\nclass Todo extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      todoName: \"\",\n      oldTodo: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.getTodos();\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleAddTodo = async e => {\n    e.preventDefault();\n    const { todoName } = this.state;\n    const { addTodo, getTodos } = this.props;\n\n    let newTodo = {\n      todoName\n    };\n\n    await addTodo(newTodo);\n    await getTodos();\n\n    this.setState({ todoName: \"\" });\n  };\n\n  handleEditTodo = () => {\n    console.log(\"Wow\");\n  };\n\n  handleDeleteTodo = todoId => {\n    console.log(todoId);\n  };\n\n  render() {\n    const { todos } = this.props.todo;\n    const { todoName } = this.state;\n\n    return (\n      <div>\n        <h1>Todo</h1>\n        <Fragment>\n          <input\n            type=\"text\"\n            name=\"todoName\"\n            value={todoName}\n            onInput={this.handleChange}\n          />\n          <button onClick={this.handleAddTodo} type=\"submit\">\n            Add\n          </button>\n        </Fragment>\n        <Fragment>\n          {todos.map(todo => (\n            <Fragment>\n              <IndividualTodo key={todo.id} todos={todo} />\n            </Fragment>\n          ))}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  todo: state.todo\n});\n\nexport default connect(\n  mapStateToProps,\n  { getTodos, addTodo, getTodo }\n)(Todo);\n"]},"metadata":{},"sourceType":"module"}