{"ast":null,"code":"var ERROR_MSG = 'a runtime error occured! Use Inferno in development environment to find the error.';\nvar isArray = Array.isArray;\n\nfunction isStringOrNumber(o) {\n  var type = typeof o;\n  return type === 'string' || type === 'number';\n}\n\nfunction isNullOrUndef(o) {\n  return o === void 0 || o === null;\n}\n\nfunction isInvalid(o) {\n  return o === null || o === false || o === true || o === void 0;\n}\n\nfunction isFunction(o) {\n  return typeof o === 'function';\n}\n\nfunction isString(o) {\n  return typeof o === 'string';\n}\n\nfunction isNumber(o) {\n  return typeof o === 'number';\n}\n\nfunction isNull(o) {\n  return o === null;\n}\n\nfunction isUndefined(o) {\n  return o === void 0;\n}\n\nfunction throwError(message) {\n  if (!message) {\n    message = ERROR_MSG;\n  }\n\n  throw new Error(\"Inferno Error: \" + message);\n}\n\nfunction warning(message) {\n  // tslint:disable-next-line:no-console\n  console.error(message);\n}\n\nfunction combineFrom(first, second) {\n  var out = {};\n\n  if (first) {\n    for (var key in first) {\n      out[key] = first[key];\n    }\n  }\n\n  if (second) {\n    for (var key$1 in second) {\n      out[key$1] = second[key$1];\n    }\n  }\n\n  return out;\n}\n\nexport { ERROR_MSG, combineFrom, isArray, isFunction, isInvalid, isNull, isNullOrUndef, isNumber, isString, isStringOrNumber, isUndefined, throwError, warning };","map":null,"metadata":{},"sourceType":"module"}