{"ast":null,"code":"import { findDOMfromVNode } from 'inferno';\n\nfunction isDOMinsideVNode(DOM, vNode) {\n  var stack = [vNode];\n\n  var _vNode;\n\n  var flags;\n  var children;\n\n  while (stack.length > 0) {\n    _vNode = stack.pop();\n\n    if (_vNode.dom === DOM) {\n      return true;\n    }\n\n    flags = _vNode.flags;\n    children = _vNode.children;\n\n    if (flags & 4\n    /* ComponentClass */\n    ) {\n        stack.push(children.$LI);\n      } else if (flags & 8\n    /* ComponentFunction */\n    ) {\n        stack.push(children);\n      } else {\n      flags = _vNode.childFlags;\n\n      if (flags & 12\n      /* MultipleChildren */\n      ) {\n          var i = children.length;\n\n          while (i--) {\n            stack.push(children[i]);\n          }\n        } else if (flags & 2\n      /* HasVNodeChildren */\n      ) {\n          stack.push(children);\n        }\n    }\n  }\n\n  return false;\n}\n\nfunction isDOMinsideComponent(DOM, instance) {\n  if (instance.$UN) {\n    return false;\n  }\n\n  return isDOMinsideVNode(DOM, instance.$LI);\n}\n\nfunction findDOMNode(ref) {\n  if (ref && ref.nodeType) {\n    return ref;\n  }\n\n  if (!ref || ref.$UN) {\n    return null;\n  }\n\n  if (ref.$LI) {\n    return findDOMfromVNode(ref.$LI, true);\n  }\n\n  if (ref.flags) {\n    return findDOMfromVNode(ref, true);\n  }\n\n  return null;\n}\n\nexport { findDOMNode, isDOMinsideComponent, isDOMinsideVNode };","map":null,"metadata":{},"sourceType":"module"}