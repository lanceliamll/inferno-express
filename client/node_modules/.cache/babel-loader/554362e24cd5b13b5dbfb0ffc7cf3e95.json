{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Component, createPortal } from 'inferno';\nimport classNames from 'classnames';\nimport { getOriginalBodyPadding, conditionallyUpdateScrollbar, setScrollbarWidth, mapToCssModules, omit } from '../utils';\nimport { animateModalOnAdd, animateModalOnRemove, Animated } from './AnimateModal';\nvar propsToOmit = ['animationPrefix', 'backgroundAnimationPrefix', 'isOpen', 'autoFocus', 'size', 'toggle', 'keyboard', 'backdrop', 'onEnter', 'onExit', 'onOpened', 'onClosed', 'children', 'className', 'wrapClassName', 'modalClassName', 'backdropClassName', 'contentClassName', 'fade', 'cssModule', 'zIndex'];\nvar defaultProps = {\n  isOpen: false,\n  autoFocus: true,\n  backdrop: true,\n  keyboard: true,\n  zIndex: 1050,\n  fade: true\n};\n\nvar Modal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Modal, _Component);\n\n  function Modal(props) {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));\n    _this.originalBodyPadding = null;\n    _this.isBodyOverflowing = false;\n    _this.togglePortal = _this.togglePortal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBackdropClick = _this.handleBackdropClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleEscape = _this.handleEscape.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.destroy = _this.destroy.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onOpened = _this.onOpened.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onClosed = _this.onClosed.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createEventListeners = _this.createEventListeners.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isOpen) {\n        this.togglePortal();\n      }\n\n      if (this.props.onEnter) {\n        this.props.onEnter();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.isOpen !== prevProps.isOpen) {\n        // handle portal events/dom updates\n        this.togglePortal();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroy();\n\n      if (this.props.onExit) {\n        this.props.onExit();\n      }\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened() {\n      if (this.props.onOpened) {\n        this.props.onOpened();\n      }\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed() {\n      this.destroy();\n\n      if (this.props.onClosed) {\n        this.props.onClosed();\n      }\n    }\n  }, {\n    key: \"handleEscape\",\n    value: function handleEscape(e) {\n      if (this._dialog && this.props.keyboard && e.keyCode === 27 && this.props.toggle) {\n        this.props.toggle();\n      }\n    }\n  }, {\n    key: \"handleBackdropClick\",\n    value: function handleBackdropClick(e) {\n      if (!this._dialog || this.props.backdrop !== true) return;\n      var container = this._dialog;\n\n      if (e.target && !container.contains(e.target) && this.props.toggle) {\n        this.props.toggle();\n      }\n    }\n  }, {\n    key: \"togglePortal\",\n    value: function togglePortal() {\n      if (this.props.isOpen) {\n        if (this.props.autoFocus) {\n          this._focus = true;\n        }\n\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }, {\n    key: \"createEventListeners\",\n    value: function createEventListeners() {\n      window.addEventListener('keyup', this.handleEscape);\n      window.addEventListener('click', this.handleBackdropClick, true);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      window.removeEventListener('keyup', this.handleEscape);\n      window.removeEventListener('click', this.handleBackdropClick, true);\n\n      if (this.state._element) {\n        var _element = this.state._element;\n        this.setState({\n          _element: null\n        });\n        document.body.removeChild(_element);\n      } // Use regex to prevent matching `modal-open` as part of a different class, e.g. `my-modal-opened`\n\n\n      var classes = document.body.className.replace(/(^| )modal-open( |$)/, ' ');\n      document.body.className = mapToCssModules(classNames(classes).trim(), this.props.cssModule);\n      setScrollbarWidth(this.originalBodyPadding);\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      // Need to trigger cleanup if the animation doesn't play\n      if (!this.props.fade) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var classes = document.body.className;\n\n      var _element = document.createElement('div');\n\n      _element.setAttribute('tabindex', '-1');\n\n      _element.style.position = 'relative';\n      _element.style.zIndex = this.props.zIndex;\n      this.originalBodyPadding = getOriginalBodyPadding();\n      conditionallyUpdateScrollbar();\n      this.createEventListeners();\n      document.body.appendChild(_element);\n      document.body.className = mapToCssModules(classNames(classes, 'modal-open'), this.props.cssModule);\n      this.setState({\n        _element: _element\n      });\n    }\n  }, {\n    key: \"renderModalDialog\",\n    value: function renderModalDialog() {\n      var _this2 = this;\n\n      var attributes = omit(this.props, propsToOmit);\n      return normalizeProps(createVNode(1, \"div\", mapToCssModules(classNames('modal-dialog', this.props.className, _defineProperty({}, \"modal-\".concat(this.props.size), this.props.size)), this.props.cssModule), createVNode(1, \"div\", mapToCssModules(classNames('modal-content', this.props.contentClassName), this.props.cssModule), this.props.children, 0), 2, _objectSpread({\n        \"role\": \"document\"\n      }, attributes), null, function (c) {\n        _this2._dialog = c;\n\n        if (_this2._focus) {\n          c.parentNode.focus();\n          _this2._focus = false;\n        }\n      }));\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this$props = this.props,\n          wrapClassName = _this$props.wrapClassName,\n          modalClassName = _this$props.modalClassName,\n          backdropClassName = _this$props.backdropClassName,\n          cssModule = _this$props.cssModule,\n          isOpen = _this$props.isOpen,\n          backdrop = _this$props.backdrop,\n          modalTransitionTimeout = _this$props.modalTransitionTimeout,\n          backdropTransitionTimeout = _this$props.backdropTransitionTimeout;\n      var modalAttributes = {\n        tabIndex: '-1'\n      };\n      var prefix = this.props.animationPrefix || \"ModalFade\";\n      var backgroundPrefix = this.props.backgroundAnimationPrefix || \"ModalBackdropFade\";\n\n      if (this.props.fade) {\n        var animCls = {\n          show: 'show',\n          active: 'fade',\n          hide: undefined\n        };\n        var backdropAnimCls = {\n          show: 'fade show',\n          active: 'fade',\n          hide: undefined\n        };\n        return createVNode(1, \"div\", mapToCssModules(wrapClassName), [normalizeProps(createComponentVNode(2, AnimatedSpecial, _objectSpread({\n          \"isOpen\": isOpen,\n          \"cssModule\": cssModule,\n          \"className\": mapToCssModules(classNames('modal', modalClassName), cssModule),\n          \"onOpened\": this.onOpened,\n          \"onClosed\": this.onClosed\n        }, modalAttributes, {\n          children: this.renderModalDialog()\n        }), \"modal-dialog\")), createComponentVNode(2, AnimatedSpecial, {\n          \"isOpen\": isOpen && backdrop,\n          \"cssModule\": cssModule,\n          \"className\": mapToCssModules(classNames('modal-backdrop', backdropClassName), cssModule)\n        }, \"modal-backdrop\")], 8);\n      }\n\n      return createVNode(1, \"div\", mapToCssModules(wrapClassName), [isOpen && normalizeProps(createVNode(1, \"div\", mapToCssModules(classNames('modal', 'show', modalClassName), cssModule), this.renderModalDialog(), 0, _objectSpread({\n        \"style\": {\n          display: 'block'\n        }\n      }, modalAttributes))), isOpen && backdrop && createVNode(1, \"div\", mapToCssModules(classNames('modal-backdrop', 'show', backdropClassName), cssModule))], 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state._element ? createPortal(this.renderChildren(), this.state._element) : null;\n    }\n  }]);\n\n  return Modal;\n}(Component);\n\nModal.defaultProps = defaultProps;\n\nvar AnimatedSpecial =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(AnimatedSpecial, _Component2);\n\n  function AnimatedSpecial() {\n    _classCallCheck(this, AnimatedSpecial);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AnimatedSpecial).apply(this, arguments));\n  }\n\n  _createClass(AnimatedSpecial, [{\n    key: \"render\",\n\n    /*\n    I need to create a separate component to get unmount to work properly\n    since animations are triggered on unmount and I don't want inferno to\n    remove all the elements until the animation is completed.\n     */\n    value: function render(_ref) {\n      var isOpen = _ref.isOpen,\n          onClosed = _ref.onClosed,\n          onOpened = _ref.onOpened,\n          attrs = _objectWithoutProperties(_ref, [\"isOpen\", \"onClosed\", \"onOpened\"]);\n\n      if (isOpen) {\n        return normalizeProps(createComponentVNode(2, Animated, _objectSpread({}, attrs), null, {\n          \"onComponentDidMount\": function onComponentDidMount(dom) {\n            return animateModalOnAdd(dom, onOpened);\n          },\n          \"onComponentWillUnmount\": function onComponentWillUnmount(dom) {\n            return animateModalOnRemove(dom, onClosed);\n          }\n        }));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return AnimatedSpecial;\n}(Component);\n\nexport default Modal;\n/*\n  props.bootstrapCls = {\n    hide: ,\n    active: 'modal fade',\n    show: 'modal show'\n  }\n*/","map":null,"metadata":{},"sourceType":"module"}