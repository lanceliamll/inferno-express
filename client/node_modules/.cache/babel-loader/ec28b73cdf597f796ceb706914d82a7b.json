{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { createElement } from 'inferno-create-element';\nimport classNames from 'classnames';\nimport { mapToCssModules } from '../utils';\nimport Button from '../Button';\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar InputGroupButton = function InputGroupButton(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      addonType = props.addonType,\n      children = props.children,\n      groupClassName = props.groupClassName,\n      groupAttributes = props.groupAttributes,\n      attributes = _objectWithoutProperties(props, [\"className\", \"cssModule\", \"tag\", \"addonType\", \"children\", \"groupClassName\", \"groupAttributes\"]);\n\n  if (typeof children === 'string') {\n    var groupClasses = mapToCssModules(classNames(groupClassName, 'input-group-' + addonType), cssModule);\n    groupAttributes = groupAttributes || {};\n    Object.assign(groupAttributes, {\n      className: groupClasses\n    });\n    return createElement(Tag, groupAttributes, normalizeProps(createComponentVNode(2, Button, _objectSpread({}, attributes, {\n      \"className\": className,\n      children: children\n    }))));\n  }\n\n  var classes = mapToCssModules(classNames(className, 'input-group-' + addonType), cssModule);\n  Object.assign(attributes, {\n    className: classes\n  });\n  return createElement(Tag, attributes, children);\n};\n\nInputGroupButton.defaultProps = defaultProps;\nexport default InputGroupButton;","map":null,"metadata":{},"sourceType":"module"}