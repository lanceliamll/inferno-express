{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport { addClassName, animationIsRunningOnParent, removeClassName, registerTransitionListener, forceReflow, clearDimensions, getDimensions, setDimensions, setDisplay } from './utils';\nexport var animateOnRemove = function animateOnRemove(node, animationName, callback) {\n  if (animationIsRunningOnParent(node)) return;\n  var animCls = {};\n\n  if (_typeof(animationName) === 'object') {\n    animCls = animationName;\n  } else {\n    animCls['start'] = animationName + '-leave';\n    animCls['active'] = animationName + '-leave-active';\n    animCls['end'] = animationName + '-leave-end';\n  } // 1. Clone DOM node, inject it and hide original\n\n\n  var clone = node.cloneNode(true);\n\n  var _getDimensions = getDimensions(node),\n      width = _getDimensions.width,\n      height = _getDimensions.height;\n\n  setDimensions(clone, width, height);\n  addClassName(clone, animCls.start); // Leaving original element so it can be removed in the normal way\n\n  setDisplay(node, 'none !important');\n  node.insertAdjacentElement('beforebegin', clone); // 2. Set an animation listener, code at end\n\n  registerTransitionListener(clone, function () {\n    // *** Cleanup ***\n    callback && callback(clone);\n    clone.remove();\n  }); // 3. Activate transitions\n\n  addClassName(clone, animCls.active); // 4. Activate target state\n\n  setTimeout(function () {\n    addClassName(clone, animCls.end);\n    removeClassName(clone, animCls.start);\n    clearDimensions(clone);\n  }, 5);\n};\nexport var animateOnAdd = function animateOnAdd(node, animationName, callback) {\n  if (animationIsRunningOnParent(node)) return;\n  var animCls = {};\n\n  if (_typeof(animationName) === 'object') {\n    animCls = animationName;\n  } else {\n    animCls['start'] = animationName + '-enter';\n    animCls['active'] = animationName + '-enter-active';\n    animCls['end'] = animationName + '-enter-end';\n  } // 1. Get height and set start of animation\n\n\n  var _getDimensions2 = getDimensions(node),\n      width = _getDimensions2.width,\n      height = _getDimensions2.height;\n\n  addClassName(node, animCls.start);\n  forceReflow(); // 2. Set an animation listener, code at end\n\n  registerTransitionListener([node, node.children[0]], function () {\n    // *** Cleanup ***\n    // 5. Remove the element\n    clearDimensions(node);\n    removeClassName(node, animCls.active);\n    removeClassName(node, animCls.end); // 6. Call callback to allow stuff to happen\n\n    callback && callback(node);\n  }); // 3. Activate transition\n\n  addClassName(node, animCls.active); // 4. Activate target state\n\n  setTimeout(function () {\n    setDimensions(node, width, height);\n    removeClassName(node, animCls.start);\n    addClassName(node, animCls.end);\n  }, 5);\n};","map":null,"metadata":{},"sourceType":"module"}