{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { Component } from 'inferno';\nimport classNames from 'classnames';\nimport { mapToCssModules } from './utils';\nimport { Target } from 'inferno-popper';\nimport Button from './Button';\nvar defaultProps = {\n  'data-toggle': 'dropdown',\n  'aria-haspopup': true,\n  color: 'secondary'\n};\n\nvar DropdownToggle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropdownToggle, _Component);\n\n  function DropdownToggle(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownToggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropdownToggle).call(this, props));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DropdownToggle, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (this.props.nav && !this.props.tag) {\n        e.preventDefault();\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(e);\n      }\n\n      this.context.toggle(e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          color = _this$props.color,\n          cssModule = _this$props.cssModule,\n          caret = _this$props.caret,\n          split = _this$props.split,\n          nav = _this$props.nav,\n          tag = _this$props.tag,\n          props = _objectWithoutProperties(_this$props, [\"className\", \"color\", \"cssModule\", \"caret\", \"split\", \"nav\", \"tag\"]);\n\n      var ariaLabel = props['aria-label'] || 'Toggle Dropdown';\n      var classes = mapToCssModules(classNames(className, {\n        'dropdown-toggle': caret || split,\n        'dropdown-toggle-split': split,\n        'nav-link': nav\n      }), cssModule);\n      var children = props.children || createVNode(1, \"span\", \"sr-only\", ariaLabel, 0);\n      var Tag;\n\n      if (nav && !tag) {\n        Tag = 'a';\n        props.href = '#';\n      } else if (!tag) {\n        Tag = Button;\n        props.color = color;\n        props.cssModule = cssModule;\n      } else {\n        Tag = tag;\n      }\n\n      return normalizeProps(createComponentVNode(2, Target, _objectSpread({}, props, {\n        \"className\": classes,\n        \"component\": Tag,\n        \"onClick\": this.onClick,\n        \"aria-haspopup\": \"true\",\n        \"aria-expanded\": this.context.isOpen,\n        \"children\": children\n      })));\n    }\n  }]);\n\n  return DropdownToggle;\n}(Component);\n\nDropdownToggle.defaultProps = defaultProps;\nexport default DropdownToggle;","map":null,"metadata":{},"sourceType":"module"}