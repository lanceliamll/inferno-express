{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { Component } from 'inferno';\nimport { createElement } from 'inferno-create-element';\nimport classNames from 'classnames';\nimport { mapToCssModules, omit } from './utils';\nimport { utils } from 'inferno-animation';\nvar addClassName = utils.addClassName,\n    removeClassName = utils.removeClassName,\n    registerTransitionListener = utils.registerTransitionListener,\n    forceReflow = utils.forceReflow,\n    clearDimensions = utils.clearDimensions,\n    getDimensions = utils.getDimensions,\n    setDimensions = utils.setDimensions,\n    setDisplay = utils.setDisplay;\n/**\n * These are the open and close animation helpers\n */\n\nfunction _animateCollapseOnRemove(node, animCls, callback) {\n  var clone = node.cloneNode(true);\n\n  var _getDimensions = getDimensions(node),\n      width = _getDimensions.width,\n      height = _getDimensions.height;\n\n  setDimensions(clone, width, height);\n  addClassName(clone, 'collapse show');\n  setDisplay(node, 'none !important');\n  node.parentNode.appendChild(clone);\n  addClassName(clone, 'collapsing');\n  registerTransitionListener(clone, function () {\n    // *** Cleanup ***\n    callback && callback(clone);\n    clone.remove();\n  });\n  setTimeout(function () {\n    removeClassName(clone, 'collapse show');\n    clearDimensions(clone);\n  }, 5);\n}\n\nfunction _animateCollapseOnAdd(node, animCls, callback) {\n  var _getDimensions2 = getDimensions(node),\n      width = _getDimensions2.width,\n      height = _getDimensions2.height;\n\n  addClassName(node, 'collapse');\n  forceReflow();\n  addClassName(node, 'collapsing');\n  setDisplay(node, 'block');\n  registerTransitionListener([node, node.children[0]], function () {\n    // *** Cleanup ***\n    removeClassName(node, 'collapsing');\n    clearDimensions(node);\n    callback && callback(node);\n  }); //setTimeout(() => {\n\n  setDimensions(node, width, height);\n  addClassName(node, 'collapse show');\n  removeClassName(node, 'collapse'); //}, 5) \n}\n\nfunction Animated(props) {\n  var Tag = props.tag,\n      children = props.children,\n      attrs = _objectWithoutProperties(props, [\"tag\", \"children\"]);\n\n  return createElement(Tag || 'div', attrs, children);\n}\n/**\n * This is the bootstrap code:\n */\n\n\nvar defaultProps = {\n  isOpen: false,\n  tag: 'div',\n  onOpened: function onOpened() {},\n  onClosed: function onClosed() {}\n};\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _classCallCheck(this, Collapse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collapse).call(this, props));\n    _this.state = {\n      active: false\n    };\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        active: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _omit = omit(this.props, ['isOpen', 'delay', 'onOpened', 'onClosed']),\n          className = _omit.className,\n          cssModule = _omit.cssModule,\n          Tag = _omit.tag,\n          attributes = _objectWithoutProperties(_omit, [\"className\", \"cssModule\", \"tag\"]);\n\n      var classes = mapToCssModules(classNames(className, !this.state.active && 'InfernoAnimation-noAnim'), cssModule);\n      var prefix = this.props.animationClassNames; // If hidden\n\n      if (!this.props.isOpen) return null;\n      return normalizeProps(createComponentVNode(2, Animated, _objectSpread({}, attributes, {\n        \"tag\": Tag,\n        \"className\": classes\n      }), null, {\n        \"onComponentDidMount\": function onComponentDidMount(dom) {\n          return _animateCollapseOnAdd(dom, _this2.props.onOpened);\n        },\n        \"onComponentWillUnmount\": function onComponentWillUnmount(dom) {\n          return _animateCollapseOnRemove(dom, _this2.props.onClosed);\n        }\n      }));\n    }\n  }]);\n\n  return Collapse;\n}(Component);\n\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","map":null,"metadata":{},"sourceType":"module"}