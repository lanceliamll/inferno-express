{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createVNode, normalizeProps } from \"inferno\";\nimport { createElement } from 'inferno-create-element';\nimport classNames from 'classnames';\nimport { mapToCssModules } from './utils';\n\nvar Media = function Media(props) {\n  var vertical = props.vertical,\n      children = props.children,\n      className = props.className,\n      cssModule = props.cssModule,\n      href = props.href,\n      tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"vertical\", \"children\", \"className\", \"cssModule\", \"href\", \"tag\"]);\n\n  var Tag = href !== undefined ? tag || 'a' : tag || 'div';\n  var classes = mapToCssModules(classNames(className, {\n    'media': true,\n    'flex-column': vertical\n  }), cssModule);\n  Object.assign(attributes, {\n    className: classes,\n    href: href\n  });\n  return createElement(Tag, attributes, children);\n};\n\nvar MediaBody = function MediaBody(props) {\n  var children = props.children,\n      className = props.className,\n      cssModule = props.cssModule,\n      tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"cssModule\", \"tag\"]);\n\n  var Tag = tag || 'div';\n  var classes = mapToCssModules(classNames(className, 'media-body'), cssModule);\n  Object.assign(attributes, {\n    className: classes\n  });\n  return createElement(Tag, attributes, children);\n};\n\nvar Image = function Image(props) {\n  var baseline = props.baseline,\n      top = props.top,\n      middle = props.middle,\n      bottom = props.bottom,\n      textTop = props.textTop,\n      textBottom = props.textBottom,\n      href = props.href,\n      target = props.target,\n      responsive = props.responsive,\n      spacing = props.spacing,\n      className = props.className,\n      cssModule = props.cssModule,\n      attributes = _objectWithoutProperties(props, [\"baseline\", \"top\", \"middle\", \"bottom\", \"textTop\", \"textBottom\", \"href\", \"target\", \"responsive\", \"spacing\", \"className\", \"cssModule\"]);\n\n  var alignment = {\n    'align-baseline': baseline,\n    'align-self-start': top,\n    'align-self-end': bottom,\n    'align-self-center': middle,\n    'align-text-top': textTop,\n    'align-text-bottom': textBottom\n  };\n  var responsiveWrapperClasses = responsive && 'embed-responsive embed-responsive-' + responsive;\n  var responsiveItemClasses = responsive && 'embed-responsive-item';\n\n  if (href) {\n    var classes = mapToCssModules(classNames(className, responsiveItemClasses), cssModule);\n    var anchorClasses = mapToCssModules(classNames(alignment, responsiveWrapperClasses, spacing), cssModule);\n    var anchorAttributes = {\n      href: href,\n      target: target\n    };\n    return normalizeProps(createVNode(1, \"a\", anchorClasses, normalizeProps(createVNode(1, \"img\", classes, null, 1, _objectSpread({}, attributes))), 2, _objectSpread({}, anchorAttributes)));\n  } else if (responsive) {\n    var _classes = mapToCssModules(classNames(className, responsiveItemClasses), cssModule);\n\n    var wrapperClasses = mapToCssModules(classNames(alignment, responsiveWrapperClasses, spacing), cssModule);\n    return createVNode(1, \"div\", wrapperClasses, normalizeProps(createVNode(1, \"img\", _classes, null, 1, _objectSpread({}, attributes))), 2);\n  } else {\n    var _classes2 = mapToCssModules(classNames(className, alignment, spacing), cssModule);\n\n    return normalizeProps(createVNode(1, \"img\", _classes2, null, 1, _objectSpread({}, attributes)));\n  }\n};\n\nexport { Media, MediaBody, Image };","map":null,"metadata":{},"sourceType":"module"}