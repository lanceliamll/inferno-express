{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport { createVNode } from \"inferno\";\nimport { Component } from 'inferno';\nimport { createElement } from 'inferno-create-element';\nimport { findDOMNode } from 'inferno-extras';\nimport { animateOnAdd, animateOnRemove } from './animatedComponent';\nimport { animationIsRunningOnParent, registerTransitionListener, forceReflow, clearDimensions, getDimensions, setDimensions } from './utils';\n\nvar animateSizeChange = function animateSizeChange(node, animationName, sourceSize, targetSize) {\n  if (animationIsRunningOnParent(node)) return; // 1. Set dimensions\n\n  setDimensions(node, sourceSize.width, sourceSize.height); // node.style.height = sourceSize.height + 'px'\n  // node.style.width = sourceSize.width + 'px'\n\n  forceReflow(node); // 2. Set an animation listener, code at end\n\n  registerTransitionListener(node, function () {\n    // *** Cleanup ***\n    // callback && callback(clone)\n    clearDimensions(node);\n    node.classList.remove(animationName + '-cross-fade-active');\n  }); // 3. Activate transition\n\n  node.classList.add(animationName + '-cross-fade-active'); // 4. Activate target state\n\n  setTimeout(function () {\n    setDimensions(node, targetSize.width, targetSize.height);\n  }, 5);\n};\n\nfunction _getSizeOfCrossFadeDOMNode(DOMNode) {\n  var domEl = DOMNode.parentNode;\n  domEl.classList.add('InfernoAnimation--getSize');\n  forceReflow(domEl);\n  var outpDimensions = getDimensions(domEl);\n  domEl.classList.remove('InfernoAnimation--getSize');\n  return outpDimensions;\n}\n\nvar CrossFade =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CrossFade, _Component);\n\n  function CrossFade(props) {\n    var _this;\n\n    _classCallCheck(this, CrossFade);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CrossFade).call(this, props));\n    _this.state = {\n      active: false\n    };\n    _this.setTargetSize = _this.setTargetSize.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setSourceSize = _this.setSourceSize.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._animationCheck = _this._animationCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CrossFade, [{\n    key: \"_animationCheck\",\n    value: function _animationCheck() {\n      if (this.state.active && this.targetSize && this.sourceSize && findDOMNode(this)) {\n        animateSizeChange(findDOMNode(this), this.props.prefix, this.sourceSize, this.targetSize);\n        this.targetSize = this.sourceSize = undefined;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.targetSize = _this2.sourceSize = undefined;\n\n        _this2.setState({\n          active: true\n        });\n      }, 10);\n    }\n  }, {\n    key: \"setTargetSize\",\n    value: function setTargetSize(DOMNode) {\n      this.targetSize = _getSizeOfCrossFadeDOMNode(DOMNode);\n\n      this._animationCheck();\n    }\n  }, {\n    key: \"setSourceSize\",\n    value: function setSourceSize(DOMNode) {\n      this.sourceSize = _getSizeOfCrossFadeDOMNode(DOMNode);\n\n      this._animationCheck();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var elProps = {};\n\n      if (this.props.className) {\n        // Using 'InfernoAnimation--noAnim' to block animations in children\n        elProps['className'] = this.props.className + (!this.state.active ? ' InfernoAnimation--noAnim' : '');\n      } else if (!this.state.active) {\n        elProps['className'] = 'InfernoAnimation--noAnim';\n      }\n\n      var children = !Array.isArray(this.props.children) ? [this.props.children] : this.props.children;\n      var childEls = children.map(function (childEl) {\n        return createElement(CrossFadeItem, {\n          // onComponentDidMount: this.setTargetSize, onComponentWillUnmount: this.setSourceSize, key: childEl.key\n          onEnter: _this3.setTargetSize,\n          onLeave: _this3.setSourceSize,\n          key: childEl && childEl.key,\n          prefix: _this3.props.prefix\n        }, childEl);\n      });\n      return createElement(this.props.el || this.props.tag || 'div', elProps, childEls);\n    }\n  }]);\n\n  return CrossFade;\n}(Component);\n/*\nfunction CrossFadeItem (props) {\n  return (\n    <div className=\"CrossFadeItem\">\n      {props.children}\n    </div>\n  )\n}\n*/\n\n\nvar CrossFadeItem =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(CrossFadeItem, _Component2);\n\n  function CrossFadeItem() {\n    _classCallCheck(this, CrossFadeItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CrossFadeItem).apply(this, arguments));\n  }\n\n  _createClass(CrossFadeItem, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      var node = findDOMNode(this);\n      this.props.onEnter(node);\n      setTimeout(function () {\n        return animateOnAdd(node, _this4.props.prefix);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this5 = this;\n\n      var node = findDOMNode(this);\n      this.props.onLeave(node);\n      setTimeout(function () {\n        return animateOnRemove(node, _this5.props.prefix);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return createVNode(1, \"div\", \"CrossFadeItem\", this.props.children, 0);\n    }\n  }]);\n\n  return CrossFadeItem;\n}(Component);\n\nexport default CrossFade;","map":null,"metadata":{},"sourceType":"module"}