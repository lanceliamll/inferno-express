{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n/* eslint react/prefer-stateless-function: 0 */\n\nimport { Component } from 'inferno';\nimport { createElement } from 'inferno-create-element';\nimport classNames from 'classnames';\nimport { mapToCssModules } from '../utils';\nvar defaultProps = {\n  tag: 'p',\n  type: 'text'\n};\n\nvar Input =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Input, _Component);\n\n  function Input() {\n    _classCallCheck(this, Input);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Input).apply(this, arguments));\n  }\n\n  _createClass(Input, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          cssModule = _this$props.cssModule,\n          type = _this$props.type,\n          bsSize = _this$props.bsSize,\n          tag = _this$props.tag,\n          valid = _this$props.valid,\n          addon = _this$props.addon,\n          plaintext = _this$props.plaintext,\n          innerRef = _this$props.innerRef,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"cssModule\", \"type\", \"bsSize\", \"tag\", \"valid\", \"addon\", \"plaintext\", \"innerRef\"]);\n\n      var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;\n      var fileInput = type === 'file';\n      var textareaInput = type === 'textarea';\n      var selectInput = type === 'select';\n      var Tag = selectInput || textareaInput ? type : 'input';\n      var formControlClass = 'form-control';\n\n      if (plaintext) {\n        formControlClass = \"\".concat(formControlClass, \"-plaintext\");\n        Tag = tag;\n      } else if (fileInput) {\n        formControlClass = \"\".concat(formControlClass, \"-file\");\n      } else if (checkInput) {\n        if (addon) {\n          formControlClass = null;\n        } else {\n          formControlClass = 'form-check-input';\n        }\n      }\n\n      var classes = mapToCssModules(classNames(className, valid === false && 'is-invalid', valid && 'is-valid', bsSize ? \"form-control-\".concat(bsSize) : false, formControlClass), cssModule);\n\n      if (Tag === 'input') {\n        attributes.type = type;\n      }\n\n      Object.assign(attributes, {\n        className: classes,\n        ref: innerRef\n      });\n      return createElement(Tag, attributes);\n    }\n  }]);\n\n  return Input;\n}(Component);\n\nInput.defaultProps = defaultProps;\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}