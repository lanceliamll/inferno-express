{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { Component, createPortal } from 'inferno';\nimport { Children } from './compat';\n\nvar noop = function noop() {\n  return null;\n};\n\nvar Travel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Travel, _Component);\n\n  function Travel(props) {\n    var _this;\n\n    _classCallCheck(this, Travel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Travel).call(this, props));\n    _this.state = {\n      portalNode: null,\n      portalInstance: null\n    };\n    return _this;\n  }\n\n  _createClass(Travel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._setupPortal();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._updatePortal();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._destroyPortal();\n    }\n  }, {\n    key: \"_getRenderToNode\",\n    value: function _getRenderToNode() {\n      var renderTo = this.props.renderTo;\n\n      if (typeof renderTo === 'string') {\n        return document.querySelector(renderTo);\n      } else {\n        return renderTo || document.body;\n      }\n    }\n  }, {\n    key: \"_getComponent\",\n    value: function _getComponent() {\n      if (this.props.useArray) {\n        return Children.toArray(this.props.children)[1];\n      } else {\n        return Children.only(this.props.children);\n      }\n    }\n  }, {\n    key: \"_setupPortal\",\n    value: function _setupPortal() {\n      var _this$props = this.props,\n          renderTag = _this$props.renderTag,\n          onMount = _this$props.onMount; // Default props\n\n      renderTag = renderTag || 'div';\n      onMount = onMount || noop;\n\n      var renderToNode = this._getRenderToNode(); // create a node that we can stick our component in\n\n\n      var portalNode = document.createElement(renderTag); // append node to the render node\n\n      renderToNode.appendChild(portalNode); // store the instance passed back to allow work to be done on it\n\n      var portalInstance = typeof onMount === 'function' ? onMount(portalNode) : portalNode;\n      this.setState({\n        portalNode: portalNode,\n        portalInstance: portalInstance\n      });\n    }\n  }, {\n    key: \"_updatePortal\",\n    value: function _updatePortal() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          id = _this$props2.id,\n          className = _this$props2.className,\n          style = _this$props2.style,\n          onUpdate = _this$props2.onUpdate; // Default props\n\n      onUpdate = onUpdate || noop;\n\n      if (id) {\n        this._portalNode.id = id;\n      }\n\n      if (className) {\n        this._portalNode.className = className;\n      }\n\n      if (style) {\n        Object.keys(style).forEach(function (key) {\n          _this2._portalNode.style[key] = style[key];\n        });\n      }\n\n      if (typeof onUpdate === 'function') {\n        this._portalInstance = onUpdate(this._portalInstance);\n      }\n    }\n  }, {\n    key: \"_destroyPortal\",\n    value: function _destroyPortal() {\n      this.state.portalNode.parentNode.removeChild(this._portalNode);\n      this.setState({\n        portalNode: null,\n        portalInstance: null\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.portalNode ? createPortal(this._getComponent(), this.state.portalNode) : null;\n    }\n  }]);\n\n  return Travel;\n}(Component);\n\nexport default Travel;","map":null,"metadata":{},"sourceType":"module"}