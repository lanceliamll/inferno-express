{"ast":null,"code":"export function addClassName(node, className) {\n  if (className) {\n    var tmp = className.split(' ');\n\n    for (var i = 0; i < tmp.length; i++) {\n      node.classList.add(tmp[i]);\n    }\n  }\n}\nexport function removeClassName(node, className) {\n  if (className) {\n    var tmp = className.split(' ');\n\n    for (var i = 0; i < tmp.length; i++) {\n      node.classList.remove(tmp[i]);\n    }\n  }\n}\nexport function forceReflow() {\n  var dummy = document.body.clientHeight;\n}\nexport function setDisplay(node, value) {\n  var oldVal = node.style.display;\n\n  if (oldVal !== value) {\n    node.style.display = value;\n  }\n\n  return oldVal;\n}\n\nfunction _cleanStyle(node) {\n  if (!node.style) {\n    node.removeAttribute('style');\n  }\n}\n\nexport function getDimensions(node) {\n  var tmpDisplay = node.style.display;\n  var isDisplayNone = window.getComputedStyle(node).getPropertyValue('display') === 'none';\n\n  if (isDisplayNone) {\n    node.style.display = 'block';\n  }\n\n  var tmp = node.getBoundingClientRect();\n\n  if (isDisplayNone) {\n    node.style.display = tmpDisplay;\n\n    _cleanStyle(node);\n  }\n\n  return {\n    width: tmp.width,\n    height: tmp.height\n  };\n}\nexport function setDimensions(node, width, height) {\n  node.style.width = width + 'px';\n  node.style.height = height + 'px';\n}\nexport function clearDimensions(node) {\n  node.style.width = node.style.height = '';\n}\nexport function animationIsRunningOnParent(node) {\n  return node.closest && node.closest('.InfernoAnimation--noAnim');\n}\n\nfunction _getMaxTransitionDuration()\n/* add nodes as args*/\n{\n  var _arguments = arguments;\n  var nrofTransitions = 0;\n  var maxDuration = 0;\n\n  var _loop = function _loop(i) {\n    var node = _arguments[i];\n    if (!node) return \"continue\";\n    var cs = window.getComputedStyle(node);\n    var dur = cs.getPropertyValue('transition-duration').split(',');\n    var del = cs.getPropertyValue('transition-delay').split(',');\n    var props = cs.getPropertyValue('transition-property').split(',').map(function (prop) {\n      return prop.trim();\n    });\n    props.forEach(function (prop) {\n      if (prop[0] === '-') {\n        var tmp = prop.split('-').splice(2).join('-');\n\n        if (props.indexOf(tmp) >= 0) {\n          nrofTransitions--;\n        }\n      }\n    });\n    var animTimeout = dur.map(function (v, index) {\n      return parseFloat(v) + parseFloat(del[index]);\n    }).reduce(function (prev, curr) {\n      return prev > curr ? prev : curr;\n    }, 0);\n    nrofTransitions += dur.length;\n\n    if (animTimeout > maxDuration) {\n      maxDuration = animTimeout;\n    }\n  };\n\n  for (var i = 0; i < arguments.length; i++) {\n    var _ret = _loop(i);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return {\n    nrofTransitions: nrofTransitions,\n    maxDuration: maxDuration\n  };\n}\n\nexport function registerTransitionListener(nodes, callback) {\n  if (!Array.isArray(nodes)) {\n    nodes = [nodes];\n  }\n\n  var rootNode = nodes[0];\n  rootNode.classList.add('InfernoAnimation-active');\n  /**\n   * Here comes the transition event listener\n   */\n\n  var _getMaxTransitionDura = _getMaxTransitionDuration.apply(this, nodes),\n      nrofTransitionsLeft = _getMaxTransitionDura.nrofTransitions,\n      maxDuration = _getMaxTransitionDura.maxDuration;\n\n  var done = false;\n\n  function onTransitionEnd(event) {\n    // Make sure it isn't a child that is triggering the event\n    if (event) {\n      var goAhead = false;\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (event.target === nodes[i]) {\n          goAhead = true;\n          break;\n        }\n      }\n\n      if (!goAhead) return;\n    }\n\n    if (done || event !== undefined && --nrofTransitionsLeft > 0) {\n      return;\n    }\n\n    done = true;\n    rootNode.classList.remove('InfernoAnimation-active');\n    /**\n     * Perform cleanup\n     */\n\n    rootNode.removeEventListener(\"transitionend\", onTransitionEnd, false);\n    callback && callback();\n  }\n\n  rootNode.addEventListener(\"transitionend\", onTransitionEnd, false); // Fallback if transitionend fails\n\n  !window.debugAnimations && setTimeout(onTransitionEnd, Math.round(maxDuration * 1000) + 100);\n}","map":null,"metadata":{},"sourceType":"module"}