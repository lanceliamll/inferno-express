{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { Component } from 'inferno';\nimport { createElement } from 'inferno-create-element';\nimport PopperJS from 'popper.js';\nexport var placements = PopperJS.placements;\nvar defaultProps = {\n  component: 'div',\n  placement: 'bottom',\n  eventsEnabled: true,\n  positionFixed: false,\n  modifiers: {}\n};\n\nvar Popper =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Popper, _Component);\n\n  function Popper() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Popper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Popper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_updateStateModifier\", {\n      enabled: true,\n      order: 900,\n      fn: function fn(data) {\n        if (_this._isDataDirty(data)) {\n          _this.setState({\n            data: data\n          });\n        }\n\n        return data;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_handlePopperRef\", function (node) {\n      _this._popperNode = node;\n\n      if (node) {\n        _this._createPopper();\n      } else {\n        _this._destroyPopper();\n      }\n\n      if (_this.props.innerRef) {\n        _this.props.innerRef(node);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Popper, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        popper: {\n          setArrowNode: this._setArrowNode.bind(this),\n          getArrowStyle: this._getArrowStyle.bind(this)\n        }\n      };\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(lastProps) {\n      if (lastProps.placement !== this.props.placement || lastProps.eventsEnabled !== this.props.eventsEnabled || lastProps.target !== this.props.target) {\n        this._destroyPopper();\n\n        this._createPopper();\n      }\n\n      if (lastProps.children !== this.props.children) {\n        this._popper.scheduleUpdate();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._destroyPopper();\n    }\n  }, {\n    key: \"_setArrowNode\",\n    value: function _setArrowNode(node) {\n      this._arrowNode = node;\n    }\n  }, {\n    key: \"_getTargetNode\",\n    value: function _getTargetNode() {\n      if (this.props.target) {\n        return this.props.target;\n      } else if (!this.context.popperManager || !this.context.popperManager.getTargetNode()) {\n        throw new Error('Target missing. Popper must be given a target from the Popper Manager, or as a prop.');\n      }\n\n      return this.context.popperManager.getTargetNode();\n    }\n  }, {\n    key: \"_getOffsets\",\n    value: function _getOffsets(data) {\n      return Object.keys(data.offsets).map(function (key) {\n        return data.offsets[key];\n      });\n    }\n  }, {\n    key: \"_isDataDirty\",\n    value: function _isDataDirty(data) {\n      if (this.state.data) {\n        return JSON.stringify(this._getOffsets(this.state.data)) !== JSON.stringify(this._getOffsets(data));\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"_createPopper\",\n    value: function _createPopper() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          placement = _this$props.placement,\n          eventsEnabled = _this$props.eventsEnabled,\n          positionFixed = _this$props.positionFixed;\n\n      var modifiers = _objectSpread({}, this.props.modifiers, {\n        applyStyle: {\n          enabled: false\n        },\n        updateState: this._updateStateModifier\n      });\n\n      if (this._arrowNode) {\n        modifiers.arrow = _objectSpread({}, this.props.modifiers.arrow || {}, {\n          element: this._arrowNode\n        });\n      }\n\n      this._popper = new PopperJS(this._getTargetNode(), this._popperNode, {\n        placement: placement,\n        positionFixed: positionFixed,\n        eventsEnabled: eventsEnabled,\n        modifiers: modifiers\n      }); // TODO: look into setTimeout scheduleUpdate call, without it, the popper will not position properly on creation\n\n      setTimeout(function () {\n        return _this2._scheduleUpdate();\n      });\n    }\n  }, {\n    key: \"_destroyPopper\",\n    value: function _destroyPopper() {\n      if (this._popper) {\n        this._popper.destroy();\n      }\n    }\n  }, {\n    key: \"_getPopperStyle\",\n    value: function _getPopperStyle() {\n      var data = this.state.data;\n\n      if (!this._popper || !data) {\n        return {\n          position: 'absolute',\n          pointerEvents: 'none',\n          opacity: 0\n        };\n      }\n\n      return _objectSpread({\n        position: data.offsets.popper.position\n      }, data.styles);\n    }\n  }, {\n    key: \"_getPopperPlacement\",\n    value: function _getPopperPlacement() {\n      return this.state.data ? this.state.data.placement : undefined;\n    }\n  }, {\n    key: \"_getPopperHide\",\n    value: function _getPopperHide() {\n      return !!this.state.data && this.state.data.hide ? '' : undefined;\n    }\n  }, {\n    key: \"_getArrowStyle\",\n    value: function _getArrowStyle() {\n      if (!this.state.data || !this.state.data.offsets.arrow) {\n        return {};\n      } else {\n        var _this$state$data$offs = this.state.data.offsets.arrow,\n            top = _this$state$data$offs.top,\n            left = _this$state$data$offs.left;\n        return {\n          top: top,\n          left: left\n        };\n      }\n    }\n  }, {\n    key: \"_scheduleUpdate\",\n    value: function _scheduleUpdate() {\n      this._popper && this._popper.scheduleUpdate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          component = _this$props2.component,\n          innerRef = _this$props2.innerRef,\n          placement = _this$props2.placement,\n          eventsEnabled = _this$props2.eventsEnabled,\n          positionFixed = _this$props2.positionFixed,\n          modifiers = _this$props2.modifiers,\n          children = _this$props2.children,\n          restProps = _objectWithoutProperties(_this$props2, [\"component\", \"innerRef\", \"placement\", \"eventsEnabled\", \"positionFixed\", \"modifiers\", \"children\"]); // Default props\n\n\n      component = component || 'div';\n      placement = placement || 'bottom';\n      eventsEnabled === undefined ? true : eventsEnabled;\n      modifiers = modifiers || {};\n\n      var popperStyle = this._getPopperStyle();\n\n      var popperPlacement = this._getPopperPlacement();\n\n      var popperHide = this._getPopperHide();\n\n      if (typeof children === 'function') {\n        var popperProps = {\n          ref: this._handlePopperRef,\n          style: popperStyle,\n          'data-placement': popperPlacement,\n          'data-x-out-of-boundaries': popperHide\n        };\n        return children({\n          popperProps: popperProps,\n          restProps: restProps,\n          scheduleUpdate: this._scheduleUpdate\n        });\n      }\n\n      var componentProps = _objectSpread({}, restProps, {\n        style: _objectSpread({}, restProps.style, popperStyle),\n        'data-placement': popperPlacement,\n        'data-x-out-of-boundaries': popperHide\n      });\n\n      if (typeof component === 'string') {\n        componentProps.ref = this._handlePopperRef;\n      } else {\n        componentProps.innerRef = this._handlePopperRef;\n      }\n\n      return createElement(component, componentProps, children);\n    }\n  }]);\n\n  return Popper;\n}(Component);\n\nPopper.defaultProps = defaultProps;\nexport default Popper;","map":null,"metadata":{},"sourceType":"module"}