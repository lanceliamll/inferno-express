{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport { Component } from 'inferno';\nimport { createElement } from 'inferno-create-element';\nimport classNames from 'classnames';\nimport { mapToCssModules } from './utils';\nvar defaultProps = {\n  color: 'secondary',\n  tag: 'button'\n};\n\nvar Button =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Button, _Component);\n\n  function Button(props) {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Button).call(this, props));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(e);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          block = _this$props.block,\n          children = _this$props.children,\n          className = _this$props.className,\n          cssModule = _this$props.cssModule,\n          color = _this$props.color,\n          outline = _this$props.outline,\n          size = _this$props.size,\n          Tag = _this$props.tag,\n          innerRef = _this$props.innerRef,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"block\", \"children\", \"className\", \"cssModule\", \"color\", \"outline\", \"size\", \"tag\", \"innerRef\"]);\n\n      var classes = mapToCssModules(classNames(className, 'btn', \"btn\".concat(outline ? '-outline' : '', \"-\").concat(color), size ? \"btn-\".concat(size) : false, block ? 'btn-block' : false, {\n        active: active,\n        disabled: this.props.disabled\n      }), cssModule);\n\n      if (attributes.href && Tag === 'button') {\n        Tag = 'a';\n      }\n\n      Object.assign(attributes, {\n        className: classes,\n        type: Tag === 'button' && attributes.onClick ? 'button' : undefined,\n        ref: innerRef,\n        onClick: this.onClick\n      });\n      return createElement(Tag, attributes, children);\n    }\n  }]);\n\n  return Button;\n}(Component);\n\nButton.defaultProps = defaultProps;\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}