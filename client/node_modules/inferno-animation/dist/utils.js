export function addClassName(node, className) {
  if (className) {
    var tmp = className.split(' ');

    for (var i = 0; i < tmp.length; i++) {
      node.classList.add(tmp[i]);
    }
  }
}
export function removeClassName(node, className) {
  if (className) {
    var tmp = className.split(' ');

    for (var i = 0; i < tmp.length; i++) {
      node.classList.remove(tmp[i]);
    }
  }
}
export function forceReflow() {
  var dummy = document.body.clientHeight;
}
export function setDisplay(node, value) {
  var oldVal = node.style.display;

  if (oldVal !== value) {
    node.style.display = value;
  }

  return oldVal;
}

function _cleanStyle(node) {
  if (!node.style) {
    node.removeAttribute('style');
  }
}

export function getDimensions(node) {
  var tmpDisplay = node.style.display;
  var isDisplayNone = window.getComputedStyle(node).getPropertyValue('display') === 'none';

  if (isDisplayNone) {
    node.style.display = 'block';
  }

  var tmp = node.getBoundingClientRect();

  if (isDisplayNone) {
    node.style.display = tmpDisplay;

    _cleanStyle(node);
  }

  return {
    width: tmp.width,
    height: tmp.height
  };
}
export function setDimensions(node, width, height) {
  node.style.width = width + 'px';
  node.style.height = height + 'px';
}
export function clearDimensions(node) {
  node.style.width = node.style.height = '';
}
export function animationIsRunningOnParent(node) {
  return node.closest && node.closest('.InfernoAnimation--noAnim');
}

function _getMaxTransitionDuration()
/* add nodes as args*/
{
  var _arguments = arguments;
  var nrofTransitions = 0;
  var maxDuration = 0;

  var _loop = function _loop(i) {
    var node = _arguments[i];
    if (!node) return "continue";
    var cs = window.getComputedStyle(node);
    var dur = cs.getPropertyValue('transition-duration').split(',');
    var del = cs.getPropertyValue('transition-delay').split(',');
    var props = cs.getPropertyValue('transition-property').split(',').map(function (prop) {
      return prop.trim();
    });
    props.forEach(function (prop) {
      if (prop[0] === '-') {
        var tmp = prop.split('-').splice(2).join('-');

        if (props.indexOf(tmp) >= 0) {
          nrofTransitions--;
        }
      }
    });
    var animTimeout = dur.map(function (v, index) {
      return parseFloat(v) + parseFloat(del[index]);
    }).reduce(function (prev, curr) {
      return prev > curr ? prev : curr;
    }, 0);
    nrofTransitions += dur.length;

    if (animTimeout > maxDuration) {
      maxDuration = animTimeout;
    }
  };

  for (var i = 0; i < arguments.length; i++) {
    var _ret = _loop(i);

    if (_ret === "continue") continue;
  }

  return {
    nrofTransitions: nrofTransitions,
    maxDuration: maxDuration
  };
}

export function registerTransitionListener(nodes, callback) {
  if (!Array.isArray(nodes)) {
    nodes = [nodes];
  }

  var rootNode = nodes[0];
  rootNode.classList.add('InfernoAnimation-active');
  /**
   * Here comes the transition event listener
   */

  var _getMaxTransitionDura = _getMaxTransitionDuration.apply(this, nodes),
      nrofTransitionsLeft = _getMaxTransitionDura.nrofTransitions,
      maxDuration = _getMaxTransitionDura.maxDuration;

  var done = false;

  function onTransitionEnd(event) {
    // Make sure it isn't a child that is triggering the event
    if (event) {
      var goAhead = false;

      for (var i = 0; i < nodes.length; i++) {
        if (event.target === nodes[i]) {
          goAhead = true;
          break;
        }
      }

      if (!goAhead) return;
    }

    if (done || event !== undefined && --nrofTransitionsLeft > 0) {
      return;
    }

    done = true;
    rootNode.classList.remove('InfernoAnimation-active');
    /**
     * Perform cleanup
     */

    rootNode.removeEventListener("transitionend", onTransitionEnd, false);
    callback && callback();
  }

  rootNode.addEventListener("transitionend", onTransitionEnd, false); // Fallback if transitionend fails

  !window.debugAnimations && setTimeout(onTransitionEnd, Math.round(maxDuration * 1000) + 100);
}