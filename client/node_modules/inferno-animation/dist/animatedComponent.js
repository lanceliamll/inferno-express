import _typeof from "@babel/runtime/helpers/typeof";
import { addClassName, animationIsRunningOnParent, removeClassName, registerTransitionListener, forceReflow, clearDimensions, getDimensions, setDimensions, setDisplay } from './utils';
export var animateOnRemove = function animateOnRemove(node, animationName, callback) {
  if (animationIsRunningOnParent(node)) return;
  var animCls = {};

  if (_typeof(animationName) === 'object') {
    animCls = animationName;
  } else {
    animCls['start'] = animationName + '-leave';
    animCls['active'] = animationName + '-leave-active';
    animCls['end'] = animationName + '-leave-end';
  } // 1. Clone DOM node, inject it and hide original


  var clone = node.cloneNode(true);

  var _getDimensions = getDimensions(node),
      width = _getDimensions.width,
      height = _getDimensions.height;

  setDimensions(clone, width, height);
  addClassName(clone, animCls.start); // Leaving original element so it can be removed in the normal way

  setDisplay(node, 'none !important');
  node.insertAdjacentElement('beforebegin', clone); // 2. Set an animation listener, code at end

  registerTransitionListener(clone, function () {
    // *** Cleanup ***
    callback && callback(clone);
    clone.remove();
  }); // 3. Activate transitions

  addClassName(clone, animCls.active); // 4. Activate target state

  setTimeout(function () {
    addClassName(clone, animCls.end);
    removeClassName(clone, animCls.start);
    clearDimensions(clone);
  }, 5);
};
export var animateOnAdd = function animateOnAdd(node, animationName, callback) {
  if (animationIsRunningOnParent(node)) return;
  var animCls = {};

  if (_typeof(animationName) === 'object') {
    animCls = animationName;
  } else {
    animCls['start'] = animationName + '-enter';
    animCls['active'] = animationName + '-enter-active';
    animCls['end'] = animationName + '-enter-end';
  } // 1. Get height and set start of animation


  var _getDimensions2 = getDimensions(node),
      width = _getDimensions2.width,
      height = _getDimensions2.height;

  addClassName(node, animCls.start);
  forceReflow(); // 2. Set an animation listener, code at end

  registerTransitionListener([node, node.children[0]], function () {
    // *** Cleanup ***
    // 5. Remove the element
    clearDimensions(node);
    removeClassName(node, animCls.active);
    removeClassName(node, animCls.end); // 6. Call callback to allow stuff to happen

    callback && callback(node);
  }); // 3. Activate transition

  addClassName(node, animCls.active); // 4. Activate target state

  setTimeout(function () {
    setDimensions(node, width, height);
    removeClassName(node, animCls.start);
    addClassName(node, animCls.end);
  }, 5);
};