import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createComponentVNode, normalizeProps } from "inferno";
import { createElement } from 'inferno-create-element';
import { animateOnAdd, animateOnRemove } from './animatedComponent';

function OriginalAnimated(_ref) {
  var el = _ref.el,
      tag = _ref.tag,
      children = _ref.children,
      attrs = _objectWithoutProperties(_ref, ["el", "tag", "children"]);

  return createElement(tag || el || 'div', attrs, children);
}

function Animated(_ref2) {
  var prefix = _ref2.prefix,
      onDidEnter = _ref2.onDidEnter,
      onDidLeave = _ref2.onDidLeave,
      attrs = _objectWithoutProperties(_ref2, ["prefix", "onDidEnter", "onDidLeave"]);

  return normalizeProps(createComponentVNode(2, OriginalAnimated, _objectSpread({}, attrs), null, {
    "onComponentDidMount": function onComponentDidMount(dom) {
      return animateOnAdd(dom, prefix, onDidEnter);
    },
    "onComponentWillUnmount": function onComponentWillUnmount(dom) {
      return animateOnRemove(dom, prefix, onDidLeave);
    }
  }));
}

export default Animated;
/*

// Why did this not work?

'use strict'
import { Component } from 'inferno'
import { createElement } from 'inferno-create-element'
import { animateOnAdd, animateOnRemove } from './animatedComponent'

function Animated ({ el, tag, prefix, onDidEnter, onDidLeave, children, ...attrs}) {

  attrs.onComponentDidMount = (dom) => animateOnAdd(dom, prefix, onDidEnter)
  attrs.onComponentWillUnmount = (dom) => animateOnRemove(dom, prefix, onDidLeave)

  return createElement(
    tag || el || 'div', 
    attrs, 
    children
  )
}

export default Animated

*/