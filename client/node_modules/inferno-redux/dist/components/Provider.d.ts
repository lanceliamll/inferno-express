import { Component, VNode } from 'inferno';
import { Store } from 'redux';
export interface Props {
    store: Store<any>;
    children?: VNode | null | undefined;
}
export declare class Provider extends Component<Props, null> {
    static displayName: string;
    private readonly store;
    constructor(props: Props, context: any);
    getChildContext(): {
        store: Store<any, any>;
        storeSubscription: null;
    };
    render(): VNode | (string & VNode) | (number & VNode) | (false & VNode) | (true & VNode) | (InfernoElement<any> & VNode) | (import("../../../inferno/src").InfernoNodeArray & VNode) | (JSX.Element & VNode) | null | undefined;
    componentWillReceiveProps?(nextProps: Props, nextContext: any): void;
}
