import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createVNode, normalizeProps } from "inferno";
import { createElement } from 'inferno-create-element';
import classNames from 'classnames';
import { mapToCssModules } from './utils';

var Media = function Media(props) {
  var vertical = props.vertical,
      children = props.children,
      className = props.className,
      cssModule = props.cssModule,
      href = props.href,
      tag = props.tag,
      attributes = _objectWithoutProperties(props, ["vertical", "children", "className", "cssModule", "href", "tag"]);

  var Tag = href !== undefined ? tag || 'a' : tag || 'div';
  var classes = mapToCssModules(classNames(className, {
    'media': true,
    'flex-column': vertical
  }), cssModule);
  Object.assign(attributes, {
    className: classes,
    href: href
  });
  return createElement(Tag, attributes, children);
};

var MediaBody = function MediaBody(props) {
  var children = props.children,
      className = props.className,
      cssModule = props.cssModule,
      tag = props.tag,
      attributes = _objectWithoutProperties(props, ["children", "className", "cssModule", "tag"]);

  var Tag = tag || 'div';
  var classes = mapToCssModules(classNames(className, 'media-body'), cssModule);
  Object.assign(attributes, {
    className: classes
  });
  return createElement(Tag, attributes, children);
};

var Image = function Image(props) {
  var baseline = props.baseline,
      top = props.top,
      middle = props.middle,
      bottom = props.bottom,
      textTop = props.textTop,
      textBottom = props.textBottom,
      href = props.href,
      target = props.target,
      responsive = props.responsive,
      spacing = props.spacing,
      className = props.className,
      cssModule = props.cssModule,
      attributes = _objectWithoutProperties(props, ["baseline", "top", "middle", "bottom", "textTop", "textBottom", "href", "target", "responsive", "spacing", "className", "cssModule"]);

  var alignment = {
    'align-baseline': baseline,
    'align-self-start': top,
    'align-self-end': bottom,
    'align-self-center': middle,
    'align-text-top': textTop,
    'align-text-bottom': textBottom
  };
  var responsiveWrapperClasses = responsive && 'embed-responsive embed-responsive-' + responsive;
  var responsiveItemClasses = responsive && 'embed-responsive-item';

  if (href) {
    var classes = mapToCssModules(classNames(className, responsiveItemClasses), cssModule);
    var anchorClasses = mapToCssModules(classNames(alignment, responsiveWrapperClasses, spacing), cssModule);
    var anchorAttributes = {
      href: href,
      target: target
    };
    return normalizeProps(createVNode(1, "a", anchorClasses, normalizeProps(createVNode(1, "img", classes, null, 1, _objectSpread({}, attributes))), 2, _objectSpread({}, anchorAttributes)));
  } else if (responsive) {
    var _classes = mapToCssModules(classNames(className, responsiveItemClasses), cssModule);

    var wrapperClasses = mapToCssModules(classNames(alignment, responsiveWrapperClasses, spacing), cssModule);
    return createVNode(1, "div", wrapperClasses, normalizeProps(createVNode(1, "img", _classes, null, 1, _objectSpread({}, attributes))), 2);
  } else {
    var _classes2 = mapToCssModules(classNames(className, alignment, spacing), cssModule);

    return normalizeProps(createVNode(1, "img", _classes2, null, 1, _objectSpread({}, attributes)));
  }
};

export { Media, MediaBody, Image };