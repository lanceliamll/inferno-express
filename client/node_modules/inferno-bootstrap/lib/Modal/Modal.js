import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import { createVNode, createComponentVNode, normalizeProps } from "inferno";
import { Component, createPortal } from 'inferno';
import classNames from 'classnames';
import { getOriginalBodyPadding, conditionallyUpdateScrollbar, setScrollbarWidth, mapToCssModules, omit } from '../utils';
import { animateModalOnAdd, animateModalOnRemove, Animated } from './AnimateModal';
var propsToOmit = ['animationPrefix', 'backgroundAnimationPrefix', 'isOpen', 'autoFocus', 'size', 'toggle', 'keyboard', 'backdrop', 'onEnter', 'onExit', 'onOpened', 'onClosed', 'children', 'className', 'wrapClassName', 'modalClassName', 'backdropClassName', 'contentClassName', 'fade', 'cssModule', 'zIndex'];
var defaultProps = {
  isOpen: false,
  autoFocus: true,
  backdrop: true,
  keyboard: true,
  zIndex: 1050,
  fade: true
};

var Modal =
/*#__PURE__*/
function (_Component) {
  _inherits(Modal, _Component);

  function Modal(props) {
    var _this;

    _classCallCheck(this, Modal);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));
    _this.originalBodyPadding = null;
    _this.isBodyOverflowing = false;
    _this.togglePortal = _this.togglePortal.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleBackdropClick = _this.handleBackdropClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleEscape = _this.handleEscape.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.destroy = _this.destroy.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onOpened = _this.onOpened.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onClosed = _this.onClosed.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.createEventListeners = _this.createEventListeners.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.state = {};
    return _this;
  }

  _createClass(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.isOpen) {
        this.togglePortal();
      }

      if (this.props.onEnter) {
        this.props.onEnter();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.isOpen !== prevProps.isOpen) {
        // handle portal events/dom updates
        this.togglePortal();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.destroy();

      if (this.props.onExit) {
        this.props.onExit();
      }
    }
  }, {
    key: "onOpened",
    value: function onOpened() {
      if (this.props.onOpened) {
        this.props.onOpened();
      }
    }
  }, {
    key: "onClosed",
    value: function onClosed() {
      this.destroy();

      if (this.props.onClosed) {
        this.props.onClosed();
      }
    }
  }, {
    key: "handleEscape",
    value: function handleEscape(e) {
      if (this._dialog && this.props.keyboard && e.keyCode === 27 && this.props.toggle) {
        this.props.toggle();
      }
    }
  }, {
    key: "handleBackdropClick",
    value: function handleBackdropClick(e) {
      if (!this._dialog || this.props.backdrop !== true) return;
      var container = this._dialog;

      if (e.target && !container.contains(e.target) && this.props.toggle) {
        this.props.toggle();
      }
    }
  }, {
    key: "togglePortal",
    value: function togglePortal() {
      if (this.props.isOpen) {
        if (this.props.autoFocus) {
          this._focus = true;
        }

        this.show();
      } else {
        this.hide();
      }
    }
  }, {
    key: "createEventListeners",
    value: function createEventListeners() {
      window.addEventListener('keyup', this.handleEscape);
      window.addEventListener('click', this.handleBackdropClick, true);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      window.removeEventListener('keyup', this.handleEscape);
      window.removeEventListener('click', this.handleBackdropClick, true);

      if (this.state._element) {
        var _element = this.state._element;
        this.setState({
          _element: null
        });
        document.body.removeChild(_element);
      } // Use regex to prevent matching `modal-open` as part of a different class, e.g. `my-modal-opened`


      var classes = document.body.className.replace(/(^| )modal-open( |$)/, ' ');
      document.body.className = mapToCssModules(classNames(classes).trim(), this.props.cssModule);
      setScrollbarWidth(this.originalBodyPadding);
    }
  }, {
    key: "hide",
    value: function hide() {
      // Need to trigger cleanup if the animation doesn't play
      if (!this.props.fade) {
        this.destroy();
      }
    }
  }, {
    key: "show",
    value: function show() {
      var classes = document.body.className;

      var _element = document.createElement('div');

      _element.setAttribute('tabindex', '-1');

      _element.style.position = 'relative';
      _element.style.zIndex = this.props.zIndex;
      this.originalBodyPadding = getOriginalBodyPadding();
      conditionallyUpdateScrollbar();
      this.createEventListeners();
      document.body.appendChild(_element);
      document.body.className = mapToCssModules(classNames(classes, 'modal-open'), this.props.cssModule);
      this.setState({
        _element: _element
      });
    }
  }, {
    key: "renderModalDialog",
    value: function renderModalDialog() {
      var _this2 = this;

      var attributes = omit(this.props, propsToOmit);
      return normalizeProps(createVNode(1, "div", mapToCssModules(classNames('modal-dialog', this.props.className, _defineProperty({}, "modal-".concat(this.props.size), this.props.size)), this.props.cssModule), createVNode(1, "div", mapToCssModules(classNames('modal-content', this.props.contentClassName), this.props.cssModule), this.props.children, 0), 2, _objectSpread({
        "role": "document"
      }, attributes), null, function (c) {
        _this2._dialog = c;

        if (_this2._focus) {
          c.parentNode.focus();
          _this2._focus = false;
        }
      }));
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this$props = this.props,
          wrapClassName = _this$props.wrapClassName,
          modalClassName = _this$props.modalClassName,
          backdropClassName = _this$props.backdropClassName,
          cssModule = _this$props.cssModule,
          isOpen = _this$props.isOpen,
          backdrop = _this$props.backdrop,
          modalTransitionTimeout = _this$props.modalTransitionTimeout,
          backdropTransitionTimeout = _this$props.backdropTransitionTimeout;
      var modalAttributes = {
        tabIndex: '-1'
      };
      var prefix = this.props.animationPrefix || "ModalFade";
      var backgroundPrefix = this.props.backgroundAnimationPrefix || "ModalBackdropFade";

      if (this.props.fade) {
        var animCls = {
          show: 'show',
          active: 'fade',
          hide: undefined
        };
        var backdropAnimCls = {
          show: 'fade show',
          active: 'fade',
          hide: undefined
        };
        return createVNode(1, "div", mapToCssModules(wrapClassName), [normalizeProps(createComponentVNode(2, AnimatedSpecial, _objectSpread({
          "isOpen": isOpen,
          "cssModule": cssModule,
          "className": mapToCssModules(classNames('modal', modalClassName), cssModule),
          "onOpened": this.onOpened,
          "onClosed": this.onClosed
        }, modalAttributes, {
          children: this.renderModalDialog()
        }), "modal-dialog")), createComponentVNode(2, AnimatedSpecial, {
          "isOpen": isOpen && backdrop,
          "cssModule": cssModule,
          "className": mapToCssModules(classNames('modal-backdrop', backdropClassName), cssModule)
        }, "modal-backdrop")], 8);
      }

      return createVNode(1, "div", mapToCssModules(wrapClassName), [isOpen && normalizeProps(createVNode(1, "div", mapToCssModules(classNames('modal', 'show', modalClassName), cssModule), this.renderModalDialog(), 0, _objectSpread({
        "style": {
          display: 'block'
        }
      }, modalAttributes))), isOpen && backdrop && createVNode(1, "div", mapToCssModules(classNames('modal-backdrop', 'show', backdropClassName), cssModule))], 0);
    }
  }, {
    key: "render",
    value: function render() {
      return this.state._element ? createPortal(this.renderChildren(), this.state._element) : null;
    }
  }]);

  return Modal;
}(Component);

Modal.defaultProps = defaultProps;

var AnimatedSpecial =
/*#__PURE__*/
function (_Component2) {
  _inherits(AnimatedSpecial, _Component2);

  function AnimatedSpecial() {
    _classCallCheck(this, AnimatedSpecial);

    return _possibleConstructorReturn(this, _getPrototypeOf(AnimatedSpecial).apply(this, arguments));
  }

  _createClass(AnimatedSpecial, [{
    key: "render",

    /*
    I need to create a separate component to get unmount to work properly
    since animations are triggered on unmount and I don't want inferno to
    remove all the elements until the animation is completed.
     */
    value: function render(_ref) {
      var isOpen = _ref.isOpen,
          onClosed = _ref.onClosed,
          onOpened = _ref.onOpened,
          attrs = _objectWithoutProperties(_ref, ["isOpen", "onClosed", "onOpened"]);

      if (isOpen) {
        return normalizeProps(createComponentVNode(2, Animated, _objectSpread({}, attrs), null, {
          "onComponentDidMount": function onComponentDidMount(dom) {
            return animateModalOnAdd(dom, onOpened);
          },
          "onComponentWillUnmount": function onComponentWillUnmount(dom) {
            return animateModalOnRemove(dom, onClosed);
          }
        }));
      } else {
        return null;
      }
    }
  }]);

  return AnimatedSpecial;
}(Component);

export default Modal;
/*
  props.bootstrapCls = {
    hide: ,
    active: 'modal fade',
    show: 'modal show'
  }
*/