import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import { Component } from 'inferno';
import { createElement } from 'inferno-create-element';
import { findDOMNode } from 'inferno-extras';
import classNames from 'classnames';
import { mapToCssModules, omit } from './utils';
var defaultProps = {
  tag: 'div'
};
var omitProps = ['tag', 'activeTab', 'className', 'cssModule'];

function getContentSize() {
  var domEl = findDOMNode(this);
  return {
    width: domEl.offsetWidth + 'px',
    height: domEl.offsetHeight + 'px'
  };
} // This could probably be generalised in inferno-animation as part of animateOnAdd


function animateCrossFadeIn(component, currSize, animationName, callback) {
  var domEl = findDOMNode(component);
  var height = domEl.offsetHeight + 'px';
  var width = domEl.offsetWidth + 'px';
  domEl.style.height = currSize.height;
  domEl.style.width = currSize.width;
  domEl.classList.add(animationName + '-enter'); // Trigger reflow

  var tmp = domEl.offsetHeight; // 2. Set an animation listener, code at end

  var done = false;
  var nrofTransitionsLeft;

  var onTransitionEnd = function onTransitionEnd(event) {
    // Make sure it isn't a child that is triggering the event
    if (event && event.target !== domEl) {
      return;
    }

    if (event !== undefined && nrofTransitionsLeft > 0) {
      nrofTransitionsLeft--;
      return;
    }

    if (done) return;
    done = true; // Clear style stuff

    domEl.style.height = domEl.style.width = '';
    domEl.classList.remove('InfernoAnimation-active');
    domEl.classList.remove(animationName + '-enter-active');
    domEl.classList.remove(animationName + '-enter-end'); // 5. Call callback to allow stuff to happen

    callback && callback(domEl);
  };

  domEl.addEventListener("transitionend", onTransitionEnd, false); // 3. Activate transitions

  domEl.classList.add(animationName + '-enter-active'); // The following is needed so we can prevent nested animations from playing slower
  // than parent animation causing a jump (in for example a cross-fade)

  domEl.classList.add('InfernoAnimation-active');
  var cs = window.getComputedStyle(domEl);
  var dur = cs.getPropertyValue('transition-duration').split(',');
  var del = cs.getPropertyValue('transition-delay').split(',');
  var animTimeout = dur.map(function (v, index) {
    return parseFloat(v) + parseFloat(del[index]);
  }).reduce(function (prev, curr) {
    return prev > curr ? prev : curr;
  }, 0);
  nrofTransitionsLeft = dur.length - 1;
  setTimeout(onTransitionEnd, Math.round(animTimeout * 1000) + 50); // Fallback if transitionend fails

  setTimeout(function () {
    domEl.style.height = height;
    domEl.style.width = width;
    domEl.classList.remove(animationName + '-enter');
    domEl.classList.add(animationName + '-enter-end');
  }, 5);
}

var TabContent =
/*#__PURE__*/
function (_Component) {
  _inherits(TabContent, _Component);

  function TabContent(props) {
    var _this;

    _classCallCheck(this, TabContent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TabContent).call(this, props));
    _this.state = {
      activeTab: _this.props.activeTab
    };
    return _this;
  }

  _createClass(TabContent, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        activeTabId: this.state
      };
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.state.activeTab !== nextProps.activeTab) {
        var sourceSize = getContentSize.call(this);
        this.setState({
          activeTab: nextProps.activeTab
        });

        if (nextProps.fade) {
          requestAnimationFrame(function () {
            animateCrossFadeIn(_this2, sourceSize, 'FadeIn');
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          cssModule = _this$props.cssModule,
          Tag = _this$props.tag;
      var attributes = omit(this.props, omitProps);
      var classes = mapToCssModules(classNames('tab-content', className), cssModule);
      Object.assign(attributes, {
        className: classes
      });
      return createElement(Tag, attributes, children);
    }
  }]);

  return TabContent;
}(Component);

export { TabContent as default };
TabContent.defaultProps = defaultProps;