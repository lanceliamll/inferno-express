import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createElement } from 'inferno-create-element';
import classNames from 'classnames';
import { mapToCssModules } from '../utils';
var defaultProps = {
  tag: 'nav',
  toggleable: false,
  expandable: false
};

var getToggleableClass = function getToggleableClass(toggleable) {
  if (toggleable === false) {
    return false;
  } else if (toggleable === true || toggleable === 'xs') {
    return 'navbar-expand';
  }

  return "navbar-expand-".concat(toggleable);
};

var Navbar = function Navbar(props) {
  var _classNames;

  var children = props.children,
      toggleable = props.toggleable,
      expandable = props.expandable,
      className = props.className,
      cssModule = props.cssModule,
      light = props.light,
      dark = props.dark,
      inverse = props.inverse,
      fixed = props.fixed,
      sticky = props.sticky,
      color = props.color,
      Tag = props.tag,
      attributes = _objectWithoutProperties(props, ["children", "toggleable", "expandable", "className", "cssModule", "light", "dark", "inverse", "fixed", "sticky", "color", "tag"]);

  var classes = mapToCssModules(classNames(className, 'navbar', getToggleableClass(toggleable || expandable), (_classNames = {
    'navbar-light': light,
    'navbar-dark': inverse || dark
  }, _defineProperty(_classNames, "bg-".concat(color), color), _defineProperty(_classNames, "fixed-".concat(fixed), fixed), _defineProperty(_classNames, "sticky-".concat(sticky), sticky), _classNames)), cssModule);
  Object.assign(attributes, {
    className: classes
  });
  return createElement(Tag, attributes, children);
};

Navbar.defaultProps = defaultProps;
export default Navbar;