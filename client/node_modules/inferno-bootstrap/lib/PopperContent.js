import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import { createComponentVNode, normalizeProps } from "inferno";
import { Component } from 'inferno';
import classNames from 'classnames';
import { Arrow, Manager, Popper } from 'inferno-popper';
import PopperTargetHelper from './PopperTargetHelper';
import { mapToCssModules } from './utils';
var defaultProps = {
  placement: 'auto',
  isOpen: false,
  offset: 0,
  fallbackPlacement: 'flip',
  wrapTag: 'span',
  flip: true
};

var PopperContent =
/*#__PURE__*/
function (_Component) {
  _inherits(PopperContent, _Component);

  function PopperContent(props) {
    var _this;

    _classCallCheck(this, PopperContent);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PopperContent).call(this, props));
    _this.handlePlacementChange = _this.handlePlacementChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.state = {};
    return _this;
  }

  _createClass(PopperContent, [{
    key: "handlePlacementChange",
    value: function handlePlacementChange(data) {
      if (this.state.placement !== data.placement) {
        this.setState({
          placement: data.placement
        });
      }

      return data;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          cssModule = _this$props.cssModule,
          children = _this$props.children,
          isOpen = _this$props.isOpen,
          flip = _this$props.flip,
          target = _this$props.target,
          offset = _this$props.offset,
          fallbackPlacement = _this$props.fallbackPlacement,
          placementPrefix = _this$props.placementPrefix,
          className = _this$props.className,
          wrapTag = _this$props.wrapTag,
          wrapClassName = _this$props.wrapClassName,
          tag = _this$props.tag,
          attrs = _objectWithoutProperties(_this$props, ["cssModule", "children", "isOpen", "flip", "target", "offset", "fallbackPlacement", "placementPrefix", "className", "wrapTag", "wrapClassName", "tag"]);

      var arrowClassName = mapToCssModules('arrow', cssModule);
      var placement = (this.state.placement || attrs.placement).split('-')[0];
      var managerClass = mapToCssModules(wrapClassName, this.props.cssModule);
      var popperClassName = mapToCssModules(classNames(className, placementPrefix ? "".concat(placementPrefix, "-").concat(placement) : placement), this.props.cssModule);
      var modifiers = {
        offset: {
          offset: offset
        },
        flip: {
          enabled: flip,
          behavior: fallbackPlacement
        },
        update: {
          enabled: true,
          order: 950,
          fn: this.handlePlacementChange
        }
      };
      return createComponentVNode(2, Manager, {
        "tag": wrapTag,
        "className": managerClass,
        children: [createComponentVNode(2, PopperTargetHelper, {
          "target": target
        }), isOpen && normalizeProps(createComponentVNode(2, Popper, _objectSpread({
          "modifiers": modifiers
        }, attrs, {
          "component": tag,
          "className": popperClassName,
          children: [children, createComponentVNode(2, Arrow, {
            "className": arrowClassName
          })]
        })))]
      });
    }
  }]);

  return PopperContent;
}(Component);

PopperContent.defaultProps = defaultProps;
export default PopperContent;