import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createComponentVNode, normalizeProps } from "inferno";
import { Component } from 'inferno';
import { createElement } from 'inferno-create-element';
import classNames from 'classnames';
import { mapToCssModules, omit } from './utils';
import { utils } from 'inferno-animation';
var addClassName = utils.addClassName,
    removeClassName = utils.removeClassName,
    registerTransitionListener = utils.registerTransitionListener,
    forceReflow = utils.forceReflow,
    clearDimensions = utils.clearDimensions,
    getDimensions = utils.getDimensions,
    setDimensions = utils.setDimensions,
    setDisplay = utils.setDisplay;
/**
 * These are the open and close animation helpers
 */

function _animateCollapseOnRemove(node, animCls, callback) {
  var clone = node.cloneNode(true);

  var _getDimensions = getDimensions(node),
      width = _getDimensions.width,
      height = _getDimensions.height;

  setDimensions(clone, width, height);
  addClassName(clone, 'collapse show');
  setDisplay(node, 'none !important');
  node.parentNode.appendChild(clone);
  addClassName(clone, 'collapsing');
  registerTransitionListener(clone, function () {
    // *** Cleanup ***
    callback && callback(clone);
    clone.remove();
  });
  setTimeout(function () {
    removeClassName(clone, 'collapse show');
    clearDimensions(clone);
  }, 5);
}

function _animateCollapseOnAdd(node, animCls, callback) {
  var _getDimensions2 = getDimensions(node),
      width = _getDimensions2.width,
      height = _getDimensions2.height;

  addClassName(node, 'collapse');
  forceReflow();
  addClassName(node, 'collapsing');
  setDisplay(node, 'block');
  registerTransitionListener([node, node.children[0]], function () {
    // *** Cleanup ***
    removeClassName(node, 'collapsing');
    clearDimensions(node);
    callback && callback(node);
  }); //setTimeout(() => {

  setDimensions(node, width, height);
  addClassName(node, 'collapse show');
  removeClassName(node, 'collapse'); //}, 5) 
}

function Animated(props) {
  var Tag = props.tag,
      children = props.children,
      attrs = _objectWithoutProperties(props, ["tag", "children"]);

  return createElement(Tag || 'div', attrs, children);
}
/**
 * This is the bootstrap code:
 */


var defaultProps = {
  isOpen: false,
  tag: 'div',
  onOpened: function onOpened() {},
  onClosed: function onClosed() {}
};

var Collapse =
/*#__PURE__*/
function (_Component) {
  _inherits(Collapse, _Component);

  function Collapse(props) {
    var _this;

    _classCallCheck(this, Collapse);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collapse).call(this, props));
    _this.state = {
      active: false
    };
    return _this;
  }

  _createClass(Collapse, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        active: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _omit = omit(this.props, ['isOpen', 'delay', 'onOpened', 'onClosed']),
          className = _omit.className,
          cssModule = _omit.cssModule,
          Tag = _omit.tag,
          attributes = _objectWithoutProperties(_omit, ["className", "cssModule", "tag"]);

      var classes = mapToCssModules(classNames(className, !this.state.active && 'InfernoAnimation-noAnim'), cssModule);
      var prefix = this.props.animationClassNames; // If hidden

      if (!this.props.isOpen) return null;
      return normalizeProps(createComponentVNode(2, Animated, _objectSpread({}, attributes, {
        "tag": Tag,
        "className": classes
      }), null, {
        "onComponentDidMount": function onComponentDidMount(dom) {
          return _animateCollapseOnAdd(dom, _this2.props.onOpened);
        },
        "onComponentWillUnmount": function onComponentWillUnmount(dom) {
          return _animateCollapseOnRemove(dom, _this2.props.onClosed);
        }
      }));
    }
  }]);

  return Collapse;
}(Component);

Collapse.defaultProps = defaultProps;
export default Collapse;