import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import { Component, createPortal } from 'inferno';
import { Children } from './compat';

var noop = function noop() {
  return null;
};

var Travel =
/*#__PURE__*/
function (_Component) {
  _inherits(Travel, _Component);

  function Travel(props) {
    var _this;

    _classCallCheck(this, Travel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Travel).call(this, props));
    _this.state = {
      portalNode: null,
      portalInstance: null
    };
    return _this;
  }

  _createClass(Travel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._setupPortal();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._updatePortal();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._destroyPortal();
    }
  }, {
    key: "_getRenderToNode",
    value: function _getRenderToNode() {
      var renderTo = this.props.renderTo;

      if (typeof renderTo === 'string') {
        return document.querySelector(renderTo);
      } else {
        return renderTo || document.body;
      }
    }
  }, {
    key: "_getComponent",
    value: function _getComponent() {
      if (this.props.useArray) {
        return Children.toArray(this.props.children)[1];
      } else {
        return Children.only(this.props.children);
      }
    }
  }, {
    key: "_setupPortal",
    value: function _setupPortal() {
      var _this$props = this.props,
          renderTag = _this$props.renderTag,
          onMount = _this$props.onMount; // Default props

      renderTag = renderTag || 'div';
      onMount = onMount || noop;

      var renderToNode = this._getRenderToNode(); // create a node that we can stick our component in


      var portalNode = document.createElement(renderTag); // append node to the render node

      renderToNode.appendChild(portalNode); // store the instance passed back to allow work to be done on it

      var portalInstance = typeof onMount === 'function' ? onMount(portalNode) : portalNode;
      this.setState({
        portalNode: portalNode,
        portalInstance: portalInstance
      });
    }
  }, {
    key: "_updatePortal",
    value: function _updatePortal() {
      var _this2 = this;

      var _this$props2 = this.props,
          id = _this$props2.id,
          className = _this$props2.className,
          style = _this$props2.style,
          onUpdate = _this$props2.onUpdate; // Default props

      onUpdate = onUpdate || noop;

      if (id) {
        this._portalNode.id = id;
      }

      if (className) {
        this._portalNode.className = className;
      }

      if (style) {
        Object.keys(style).forEach(function (key) {
          _this2._portalNode.style[key] = style[key];
        });
      }

      if (typeof onUpdate === 'function') {
        this._portalInstance = onUpdate(this._portalInstance);
      }
    }
  }, {
    key: "_destroyPortal",
    value: function _destroyPortal() {
      this.state.portalNode.parentNode.removeChild(this._portalNode);
      this.setState({
        portalNode: null,
        portalInstance: null
      });
    }
  }, {
    key: "render",
    value: function render() {
      return this.state.portalNode ? createPortal(this._getComponent(), this.state.portalNode) : null;
    }
  }]);

  return Travel;
}(Component);

export default Travel;