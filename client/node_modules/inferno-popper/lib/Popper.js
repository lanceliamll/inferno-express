import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { Component } from 'inferno';
import { createElement } from 'inferno-create-element';
import PopperJS from 'popper.js';
export var placements = PopperJS.placements;
var defaultProps = {
  component: 'div',
  placement: 'bottom',
  eventsEnabled: true,
  positionFixed: false,
  modifiers: {}
};

var Popper =
/*#__PURE__*/
function (_Component) {
  _inherits(Popper, _Component);

  function Popper() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Popper);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Popper)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {});

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_updateStateModifier", {
      enabled: true,
      order: 900,
      fn: function fn(data) {
        if (_this._isDataDirty(data)) {
          _this.setState({
            data: data
          });
        }

        return data;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_handlePopperRef", function (node) {
      _this._popperNode = node;

      if (node) {
        _this._createPopper();
      } else {
        _this._destroyPopper();
      }

      if (_this.props.innerRef) {
        _this.props.innerRef(node);
      }
    });

    return _this;
  }

  _createClass(Popper, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        popper: {
          setArrowNode: this._setArrowNode.bind(this),
          getArrowStyle: this._getArrowStyle.bind(this)
        }
      };
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(lastProps) {
      if (lastProps.placement !== this.props.placement || lastProps.eventsEnabled !== this.props.eventsEnabled || lastProps.target !== this.props.target) {
        this._destroyPopper();

        this._createPopper();
      }

      if (lastProps.children !== this.props.children) {
        this._popper.scheduleUpdate();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._destroyPopper();
    }
  }, {
    key: "_setArrowNode",
    value: function _setArrowNode(node) {
      this._arrowNode = node;
    }
  }, {
    key: "_getTargetNode",
    value: function _getTargetNode() {
      if (this.props.target) {
        return this.props.target;
      } else if (!this.context.popperManager || !this.context.popperManager.getTargetNode()) {
        throw new Error('Target missing. Popper must be given a target from the Popper Manager, or as a prop.');
      }

      return this.context.popperManager.getTargetNode();
    }
  }, {
    key: "_getOffsets",
    value: function _getOffsets(data) {
      return Object.keys(data.offsets).map(function (key) {
        return data.offsets[key];
      });
    }
  }, {
    key: "_isDataDirty",
    value: function _isDataDirty(data) {
      if (this.state.data) {
        return JSON.stringify(this._getOffsets(this.state.data)) !== JSON.stringify(this._getOffsets(data));
      } else {
        return true;
      }
    }
  }, {
    key: "_createPopper",
    value: function _createPopper() {
      var _this2 = this;

      var _this$props = this.props,
          placement = _this$props.placement,
          eventsEnabled = _this$props.eventsEnabled,
          positionFixed = _this$props.positionFixed;

      var modifiers = _objectSpread({}, this.props.modifiers, {
        applyStyle: {
          enabled: false
        },
        updateState: this._updateStateModifier
      });

      if (this._arrowNode) {
        modifiers.arrow = _objectSpread({}, this.props.modifiers.arrow || {}, {
          element: this._arrowNode
        });
      }

      this._popper = new PopperJS(this._getTargetNode(), this._popperNode, {
        placement: placement,
        positionFixed: positionFixed,
        eventsEnabled: eventsEnabled,
        modifiers: modifiers
      }); // TODO: look into setTimeout scheduleUpdate call, without it, the popper will not position properly on creation

      setTimeout(function () {
        return _this2._scheduleUpdate();
      });
    }
  }, {
    key: "_destroyPopper",
    value: function _destroyPopper() {
      if (this._popper) {
        this._popper.destroy();
      }
    }
  }, {
    key: "_getPopperStyle",
    value: function _getPopperStyle() {
      var data = this.state.data;

      if (!this._popper || !data) {
        return {
          position: 'absolute',
          pointerEvents: 'none',
          opacity: 0
        };
      }

      return _objectSpread({
        position: data.offsets.popper.position
      }, data.styles);
    }
  }, {
    key: "_getPopperPlacement",
    value: function _getPopperPlacement() {
      return this.state.data ? this.state.data.placement : undefined;
    }
  }, {
    key: "_getPopperHide",
    value: function _getPopperHide() {
      return !!this.state.data && this.state.data.hide ? '' : undefined;
    }
  }, {
    key: "_getArrowStyle",
    value: function _getArrowStyle() {
      if (!this.state.data || !this.state.data.offsets.arrow) {
        return {};
      } else {
        var _this$state$data$offs = this.state.data.offsets.arrow,
            top = _this$state$data$offs.top,
            left = _this$state$data$offs.left;
        return {
          top: top,
          left: left
        };
      }
    }
  }, {
    key: "_scheduleUpdate",
    value: function _scheduleUpdate() {
      this._popper && this._popper.scheduleUpdate();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          component = _this$props2.component,
          innerRef = _this$props2.innerRef,
          placement = _this$props2.placement,
          eventsEnabled = _this$props2.eventsEnabled,
          positionFixed = _this$props2.positionFixed,
          modifiers = _this$props2.modifiers,
          children = _this$props2.children,
          restProps = _objectWithoutProperties(_this$props2, ["component", "innerRef", "placement", "eventsEnabled", "positionFixed", "modifiers", "children"]); // Default props


      component = component || 'div';
      placement = placement || 'bottom';
      eventsEnabled === undefined ? true : eventsEnabled;
      modifiers = modifiers || {};

      var popperStyle = this._getPopperStyle();

      var popperPlacement = this._getPopperPlacement();

      var popperHide = this._getPopperHide();

      if (typeof children === 'function') {
        var popperProps = {
          ref: this._handlePopperRef,
          style: popperStyle,
          'data-placement': popperPlacement,
          'data-x-out-of-boundaries': popperHide
        };
        return children({
          popperProps: popperProps,
          restProps: restProps,
          scheduleUpdate: this._scheduleUpdate
        });
      }

      var componentProps = _objectSpread({}, restProps, {
        style: _objectSpread({}, restProps.style, popperStyle),
        'data-placement': popperPlacement,
        'data-x-out-of-boundaries': popperHide
      });

      if (typeof component === 'string') {
        componentProps.ref = this._handlePopperRef;
      } else {
        componentProps.innerRef = this._handlePopperRef;
      }

      return createElement(component, componentProps, children);
    }
  }]);

  return Popper;
}(Component);

Popper.defaultProps = defaultProps;
export default Popper;