import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { Component } from 'inferno';
import { createElement } from 'inferno-create-element';

var Target = function Target(props, context) {
  var _props$component = props.component,
      component = _props$component === void 0 ? 'div' : _props$component,
      innerRef = props.innerRef,
      children = props.children,
      restProps = _objectWithoutProperties(props, ["component", "innerRef", "children"]);

  var popperManager = context.popperManager;

  var targetRef = function targetRef(node) {
    popperManager.setTargetNode(node);

    if (typeof innerRef === 'function') {
      innerRef(node);
    }
  };

  if (typeof children === 'function') {
    var targetProps = {
      ref: targetRef
    };
    return children({
      targetProps: targetProps,
      restProps: restProps
    });
  }

  var componentProps = _objectSpread({}, restProps);

  if (typeof component === 'string') {
    componentProps.ref = targetRef;
  } else {
    componentProps.innerRef = targetRef;
  }

  return createElement(component, componentProps, children);
};

export default Target;