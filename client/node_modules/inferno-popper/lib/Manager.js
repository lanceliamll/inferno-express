import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import { Component } from 'inferno';
import { createElement } from 'inferno-create-element';

var Manager =
/*#__PURE__*/
function (_Component) {
  _inherits(Manager, _Component);

  function Manager(props) {
    var _this;

    _classCallCheck(this, Manager);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Manager).call(this, props));

    _this._setTargetNode = function (node) {
      _this._targetNode = node;
    };

    _this._getTargetNode = function () {
      return _this._targetNode;
    };

    return _this;
  }

  _createClass(Manager, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        popperManager: {
          setTargetNode: this._setTargetNode,
          getTargetNode: this._getTargetNode
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          Tag = _this$props.tag,
          children = _this$props.children,
          restProps = _objectWithoutProperties(_this$props, ["tag", "children"]);

      if (Tag !== false) {
        return createElement(Tag || 'div', restProps, children);
      } else {
        return children;
      }
    }
  }]);

  return Manager;
}(Component);

export default Manager;