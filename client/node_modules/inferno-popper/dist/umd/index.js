(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('inferno'), require('inferno-create-element'), require('popper.js')) :
  typeof define === 'function' && define.amd ? define(['exports', 'inferno', 'inferno-create-element', 'popper.js'], factory) :
  (factory((global.InfernoPopper = {}),global.Inferno,global.infernoCreateElement,global.Popper));
}(this, (function (exports,inferno,infernoCreateElement,PopperJS) { 'use strict';

  PopperJS = PopperJS && PopperJS.hasOwnProperty('default') ? PopperJS['default'] : PopperJS;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var Manager =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Manager, _Component);

    function Manager(props) {
      var _this;

      _classCallCheck(this, Manager);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Manager).call(this, props));

      _this._setTargetNode = function (node) {
        _this._targetNode = node;
      };

      _this._getTargetNode = function () {
        return _this._targetNode;
      };

      return _this;
    }

    _createClass(Manager, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          popperManager: {
            setTargetNode: this._setTargetNode,
            getTargetNode: this._getTargetNode
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            Tag = _this$props.tag,
            children = _this$props.children,
            restProps = _objectWithoutProperties(_this$props, ["tag", "children"]);

        if (Tag !== false) {
          return infernoCreateElement.createElement(Tag || 'div', restProps, children);
        } else {
          return children;
        }
      }
    }]);

    return Manager;
  }(inferno.Component);

  var Target = function Target(props, context) {
    var _props$component = props.component,
        component = _props$component === void 0 ? 'div' : _props$component,
        innerRef = props.innerRef,
        children = props.children,
        restProps = _objectWithoutProperties(props, ["component", "innerRef", "children"]);

    var popperManager = context.popperManager;

    var targetRef = function targetRef(node) {
      popperManager.setTargetNode(node);

      if (typeof innerRef === 'function') {
        innerRef(node);
      }
    };

    if (typeof children === 'function') {
      var targetProps = {
        ref: targetRef
      };
      return children({
        targetProps: targetProps,
        restProps: restProps
      });
    }

    var componentProps = _objectSpread({}, restProps);

    if (typeof component === 'string') {
      componentProps.ref = targetRef;
    } else {
      componentProps.innerRef = targetRef;
    }

    return infernoCreateElement.createElement(component, componentProps, children);
  };

  var placements = PopperJS.placements;
  var defaultProps = {
    component: 'div',
    placement: 'bottom',
    eventsEnabled: true,
    positionFixed: false,
    modifiers: {}
  };

  var Popper =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Popper, _Component);

    function Popper() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Popper);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Popper)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {});

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_updateStateModifier", {
        enabled: true,
        order: 900,
        fn: function fn(data) {
          if (_this._isDataDirty(data)) {
            _this.setState({
              data: data
            });
          }

          return data;
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_handlePopperRef", function (node) {
        _this._popperNode = node;

        if (node) {
          _this._createPopper();
        } else {
          _this._destroyPopper();
        }

        if (_this.props.innerRef) {
          _this.props.innerRef(node);
        }
      });

      return _this;
    }

    _createClass(Popper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          popper: {
            setArrowNode: this._setArrowNode.bind(this),
            getArrowStyle: this._getArrowStyle.bind(this)
          }
        };
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(lastProps) {
        if (lastProps.placement !== this.props.placement || lastProps.eventsEnabled !== this.props.eventsEnabled || lastProps.target !== this.props.target) {
          this._destroyPopper();

          this._createPopper();
        }

        if (lastProps.children !== this.props.children) {
          this._popper.scheduleUpdate();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._destroyPopper();
      }
    }, {
      key: "_setArrowNode",
      value: function _setArrowNode(node) {
        this._arrowNode = node;
      }
    }, {
      key: "_getTargetNode",
      value: function _getTargetNode() {
        if (this.props.target) {
          return this.props.target;
        } else if (!this.context.popperManager || !this.context.popperManager.getTargetNode()) {
          throw new Error('Target missing. Popper must be given a target from the Popper Manager, or as a prop.');
        }

        return this.context.popperManager.getTargetNode();
      }
    }, {
      key: "_getOffsets",
      value: function _getOffsets(data) {
        return Object.keys(data.offsets).map(function (key) {
          return data.offsets[key];
        });
      }
    }, {
      key: "_isDataDirty",
      value: function _isDataDirty(data) {
        if (this.state.data) {
          return JSON.stringify(this._getOffsets(this.state.data)) !== JSON.stringify(this._getOffsets(data));
        } else {
          return true;
        }
      }
    }, {
      key: "_createPopper",
      value: function _createPopper() {
        var _this2 = this;

        var _this$props = this.props,
            placement = _this$props.placement,
            eventsEnabled = _this$props.eventsEnabled,
            positionFixed = _this$props.positionFixed;

        var modifiers = _objectSpread({}, this.props.modifiers, {
          applyStyle: {
            enabled: false
          },
          updateState: this._updateStateModifier
        });

        if (this._arrowNode) {
          modifiers.arrow = _objectSpread({}, this.props.modifiers.arrow || {}, {
            element: this._arrowNode
          });
        }

        this._popper = new PopperJS(this._getTargetNode(), this._popperNode, {
          placement: placement,
          positionFixed: positionFixed,
          eventsEnabled: eventsEnabled,
          modifiers: modifiers
        }); // TODO: look into setTimeout scheduleUpdate call, without it, the popper will not position properly on creation

        setTimeout(function () {
          return _this2._scheduleUpdate();
        });
      }
    }, {
      key: "_destroyPopper",
      value: function _destroyPopper() {
        if (this._popper) {
          this._popper.destroy();
        }
      }
    }, {
      key: "_getPopperStyle",
      value: function _getPopperStyle() {
        var data = this.state.data;

        if (!this._popper || !data) {
          return {
            position: 'absolute',
            pointerEvents: 'none',
            opacity: 0
          };
        }

        return _objectSpread({
          position: data.offsets.popper.position
        }, data.styles);
      }
    }, {
      key: "_getPopperPlacement",
      value: function _getPopperPlacement() {
        return this.state.data ? this.state.data.placement : undefined;
      }
    }, {
      key: "_getPopperHide",
      value: function _getPopperHide() {
        return !!this.state.data && this.state.data.hide ? '' : undefined;
      }
    }, {
      key: "_getArrowStyle",
      value: function _getArrowStyle() {
        if (!this.state.data || !this.state.data.offsets.arrow) {
          return {};
        } else {
          var _this$state$data$offs = this.state.data.offsets.arrow,
              top = _this$state$data$offs.top,
              left = _this$state$data$offs.left;
          return {
            top: top,
            left: left
          };
        }
      }
    }, {
      key: "_scheduleUpdate",
      value: function _scheduleUpdate() {
        this._popper && this._popper.scheduleUpdate();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            component = _this$props2.component,
            innerRef = _this$props2.innerRef,
            placement = _this$props2.placement,
            eventsEnabled = _this$props2.eventsEnabled,
            positionFixed = _this$props2.positionFixed,
            modifiers = _this$props2.modifiers,
            children = _this$props2.children,
            restProps = _objectWithoutProperties(_this$props2, ["component", "innerRef", "placement", "eventsEnabled", "positionFixed", "modifiers", "children"]); // Default props


        component = component || 'div';
        placement = placement || 'bottom';
        modifiers = modifiers || {};

        var popperStyle = this._getPopperStyle();

        var popperPlacement = this._getPopperPlacement();

        var popperHide = this._getPopperHide();

        if (typeof children === 'function') {
          var popperProps = {
            ref: this._handlePopperRef,
            style: popperStyle,
            'data-placement': popperPlacement,
            'data-x-out-of-boundaries': popperHide
          };
          return children({
            popperProps: popperProps,
            restProps: restProps,
            scheduleUpdate: this._scheduleUpdate
          });
        }

        var componentProps = _objectSpread({}, restProps, {
          style: _objectSpread({}, restProps.style, popperStyle),
          'data-placement': popperPlacement,
          'data-x-out-of-boundaries': popperHide
        });

        if (typeof component === 'string') {
          componentProps.ref = this._handlePopperRef;
        } else {
          componentProps.innerRef = this._handlePopperRef;
        }

        return infernoCreateElement.createElement(component, componentProps, children);
      }
    }]);

    return Popper;
  }(inferno.Component);

  Popper.defaultProps = defaultProps;

  var Arrow = function Arrow(props, context) {
    var _props$component = props.component,
        component = _props$component === void 0 ? 'span' : _props$component,
        innerRef = props.innerRef,
        children = props.children,
        restProps = _objectWithoutProperties(props, ["component", "innerRef", "children"]);

    var popper = context.popper;

    var arrowRef = function arrowRef(node) {
      popper.setArrowNode(node);

      if (typeof innerRef === 'function') {
        innerRef(node);
      }
    };

    var arrowStyle = popper.getArrowStyle();

    if (typeof children === 'function') {
      var arrowProps = {
        ref: arrowRef,
        style: arrowStyle
      };
      return children({
        arrowProps: arrowProps,
        restProps: restProps
      });
    }

    var componentProps = _objectSpread({}, restProps, {
      style: _objectSpread({}, arrowStyle, restProps.style)
    });

    if (typeof component === 'string') {
      componentProps.ref = arrowRef;
    } else {
      componentProps.innerRef = arrowRef;
    }

    return infernoCreateElement.createElement(component, componentProps, children);
  };

  var isArray = Array.isArray;

  function isNullOrUndef(o) {
    return isUndefined(o) || isNull(o);
  }

  function isNull(o) {
    return o === null;
  }

  function isUndefined(o) {
    return o === void 0;
  }

  /* COMPATIBILITY */

  var ARR = [];
  var Children = {
    only: function only(children) {
      children = Children.toArray(children);

      if (children.length !== 1) {
        throw new Error("Children.only() expects only one child.");
      }

      return children[0];
    },
    toArray: function toArray(children) {
      if (isNullOrUndef(children)) {
        return [];
      } // We need to flatten arrays here,
      // because React does it also and application level code might depend on that behavior


      if (isArray(children)) {
        var result = [];
        flatten(children, result);
        return result;
      }

      return ARR.concat(children);
    }
  };
  /* /COMPATIBILITY */

  var noop = function noop() {
    return null;
  };

  var Travel =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Travel, _Component);

    function Travel(props) {
      var _this;

      _classCallCheck(this, Travel);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Travel).call(this, props));
      _this.state = {
        portalNode: null,
        portalInstance: null
      };
      return _this;
    }

    _createClass(Travel, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._setupPortal();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._updatePortal();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._destroyPortal();
      }
    }, {
      key: "_getRenderToNode",
      value: function _getRenderToNode() {
        var renderTo = this.props.renderTo;

        if (typeof renderTo === 'string') {
          return document.querySelector(renderTo);
        } else {
          return renderTo || document.body;
        }
      }
    }, {
      key: "_getComponent",
      value: function _getComponent() {
        if (this.props.useArray) {
          return Children.toArray(this.props.children)[1];
        } else {
          return Children.only(this.props.children);
        }
      }
    }, {
      key: "_setupPortal",
      value: function _setupPortal() {
        var _this$props = this.props,
            renderTag = _this$props.renderTag,
            onMount = _this$props.onMount; // Default props

        renderTag = renderTag || 'div';
        onMount = onMount || noop;

        var renderToNode = this._getRenderToNode(); // create a node that we can stick our component in


        var portalNode = document.createElement(renderTag); // append node to the render node

        renderToNode.appendChild(portalNode); // store the instance passed back to allow work to be done on it

        var portalInstance = typeof onMount === 'function' ? onMount(portalNode) : portalNode;
        this.setState({
          portalNode: portalNode,
          portalInstance: portalInstance
        });
      }
    }, {
      key: "_updatePortal",
      value: function _updatePortal() {
        var _this2 = this;

        var _this$props2 = this.props,
            id = _this$props2.id,
            className = _this$props2.className,
            style = _this$props2.style,
            onUpdate = _this$props2.onUpdate; // Default props

        onUpdate = onUpdate || noop;

        if (id) {
          this._portalNode.id = id;
        }

        if (className) {
          this._portalNode.className = className;
        }

        if (style) {
          Object.keys(style).forEach(function (key) {
            _this2._portalNode.style[key] = style[key];
          });
        }

        if (typeof onUpdate === 'function') {
          this._portalInstance = onUpdate(this._portalInstance);
        }
      }
    }, {
      key: "_destroyPortal",
      value: function _destroyPortal() {
        this.state.portalNode.parentNode.removeChild(this._portalNode);
        this.setState({
          portalNode: null,
          portalInstance: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        return this.state.portalNode ? inferno.createPortal(this._getComponent(), this.state.portalNode) : null;
      }
    }]);

    return Travel;
  }(inferno.Component);

  exports.Manager = Manager;
  exports.Target = Target;
  exports.Popper = Popper;
  exports.placements = placements;
  exports.Arrow = Arrow;
  exports.Travel = Travel;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
